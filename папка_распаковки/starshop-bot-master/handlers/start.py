from aiogram import Router
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, InputMediaPhoto
from aiogram.filters import Command
from aiogram import F
from config import load_config
from aiogram.types import CallbackQuery
from aiogram.utils.markdown import hbold
import re
from handlers.profile import get_or_create_user, PromoUserStates
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
import httpx
import time
import asyncio
from aiogram.exceptions import TelegramBadRequest
import random
import string
from datetime import datetime, timedelta, timezone

router = Router()
config = load_config()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è JWT-—Ç–æ–∫–µ–Ω–∞
_jwt_token_cache = None
_jwt_token_expire = 0

STAR_PACKS = [
    50, 75, 100, 150, 250,
    350, 500, 750, 1000, 1500,
    2500, 5000, 10000, 25000, 35000,
    50000, 100000, 150000, 500000, 1000000
]
PACKS_PER_PAGE = 5
STAR_PRICE = 1.8

FRAGMENT_API_KEY = config.fragment_api_key
FRAGMENT_SHOP_ID = config.fragment_shop_id

# –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞—Ä–∏—Ñ—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ–º–∏—É–º–∞ (3, 6, 12 –º–µ—Å)
PREMIUM_PLANS = [
    {"name": "3 –º–µ—Å—è—Ü–∞", "price": 799, "duration": 90},
    {"name": "6 –º–µ—Å—è—Ü–µ–≤", "price": 1499, "duration": 180},
    {"name": "12 –º–µ—Å—è—Ü–µ–≤", "price": 2499, "duration": 365}
]

def get_channel_link():
    # –ï—Å–ª–∏ —ç—Ç–æ username (@channel), —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É https://t.me/username
    if config.news_channel_id.startswith('@'):
        return f"https://t.me/{config.news_channel_id.lstrip('@')}"
    # –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ —Å—Å—ã–ª–∫–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
    if config.news_channel_id.startswith('https://t.me/'):
        return config.news_channel_id
    # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, –µ—Å–ª–∏ id (–Ω–∞–ø—Ä–∏–º–µ—Ä, -100...), —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É
    if re.match(r"^-?\d+$", config.news_channel_id):
        return f"https://t.me/c/{config.news_channel_id.lstrip('-100')}"
    return config.news_channel_id

async def check_subscription(user_id: int, bot) -> bool:
    try:
        member = await bot.get_chat_member(config.news_channel_id, user_id)
        return member.status in ("member", "administrator", "creator")
    except Exception:
        return False

def main_menu_kb(user_id=None):
    buttons = [
        [
            InlineKeyboardButton(text="‚≠ê –ö—É–ø–∏—Ç—å –∑–≤—ë–∑–¥—ã", callback_data="buy_stars"),
            InlineKeyboardButton(text="üíé –ö—É–ø–∏—Ç—å –ø—Ä–µ–º–∏—É–º", callback_data="buy_premium")
        ],
        [
            InlineKeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile"),
            InlineKeyboardButton(text="üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url=config.support_url)
        ],
        [
            InlineKeyboardButton(text="üì¢ –ù–æ–≤–æ—Å—Ç–Ω–æ–π –∫–∞–Ω–∞–ª", url=config.news_channel_link)
        ]
    ]
    if user_id is not None and str(user_id) == str(config.admin_id):
        buttons.append([
            InlineKeyboardButton(text="‚öôÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_panel")
        ])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def admin_panel_kb():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞–º–∏", callback_data="admin_balances")],
        [InlineKeyboardButton(text="–ü—Ä–æ–º–æ–∫–æ–¥—ã", callback_data="admin_promos")],
        [InlineKeyboardButton(text="–†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast")],
        [InlineKeyboardButton(text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ü–µ–Ω–∞–º–∏", callback_data="admin_prices")],
        [InlineKeyboardButton(text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è", callback_data="admin_payment_settings")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="main_menu")],
    ])

@router.message(Command("start"))
async def cmd_start(message: Message, bot, db_pool):
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∞
    invited_by = None
    args = message.text.split()
    if len(args) > 1:
        try:
            invited_by = int(args[1])
        except ValueError:
            invited_by = None
    # –°–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç, –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º invited_by
    user = await get_or_create_user(db_pool, message.from_user.id, message.from_user.username, invited_by=invited_by)

    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await message.answer_photo(config.welcome_image_url, caption=config.welcome_description, reply_markup=main_menu_kb(message.from_user.id), parse_mode="HTML")


@router.callback_query(F.data == "buy_stars")
async def buy_stars_callback(call: CallbackQuery):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üßë‚Äçüíº –°–µ–±–µ", callback_data="buy_stars_self"),
            InlineKeyboardButton(text="üéÅ –î—Ä—É–≥–æ–º—É", callback_data="buy_stars_gift")
        ],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ])
    await call.message.answer_photo(
        config.welcome_image_url,
        caption="<b>–ö—É–ø–∏—Ç—å –∑–≤—ë–∑–¥—ã</b>\n\n–ö–æ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å –∑–≤—ë–∑–¥—ã?",
        reply_markup=kb,
        parse_mode="HTML"
    )
    await call.answer()

class BuyStarsGiftStates(StatesGroup):
    waiting_for_recipient = State()
    waiting_for_gift_amount = State()

class BuyStarsSelfStates(StatesGroup):
    waiting_for_self_amount = State()

class BuyStarsConfirmStates(StatesGroup):
    waiting_for_confirm = State()
    waiting_for_gift_confirm = State()

@router.callback_query(F.data == "buy_stars_self")
async def buy_stars_self_callback(call: CallbackQuery):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üî¢ –í–≤–µ—Å—Ç–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", callback_data="buy_stars_self_amount"),
            InlineKeyboardButton(text="üì¶ –ì–æ—Ç–æ–≤—ã–µ –ø–∞–∫–∏", callback_data="buy_stars_self_packs")
        ],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="buy_stars")]
    ])
    await call.message.edit_caption(
        caption="<b>–ü–æ–∫—É–ø–∫–∞ –∑–≤—ë–∑–¥ –¥–ª—è —Å–µ–±—è</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–±:",
        reply_markup=kb,
        parse_mode="HTML"
    )
    await call.answer()

@router.callback_query(F.data == "buy_stars_self_amount")
async def buy_stars_self_amount_callback(call: CallbackQuery, state: FSMContext):
    await call.message.edit_caption(
        caption="<b>–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ (–º–∏–Ω–∏–º—É–º 50):</b>",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="buy_stars_self")]
        ]),
        parse_mode="HTML"
    )
    await state.set_state(BuyStarsSelfStates.waiting_for_self_amount)
    await call.answer()

@router.message(BuyStarsSelfStates.waiting_for_self_amount)
async def process_self_amount(message: Message, state: FSMContext, db_pool):
    try:
        amount = int(message.text)
    except ValueError:
        await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ (–º–∏–Ω–∏–º—É–º 50):")
        return
    if amount < 50:
        await message.answer("‚ùó –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ ‚Äî 50 –∑–≤—ë–∑–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    star_price = await get_star_price(db_pool)
    total = round(amount * star_price, 2)
    data = await state.get_data()
    discount = data.get("active_discount")
    if not discount:
        user = await get_or_create_user(db_pool, message.from_user.id, message.from_user.username)
        discount = user.get("discount")
    if discount:
        discount = float(discount)
        discounted_total = round(total * (1 - discount / 100), 2)
        await state.update_data(amount=amount, total=discounted_total, original_total=total)
        price_text = f"–í—ã –≤—ã–±—Ä–∞–ª–∏: <b>{amount}</b> –∑–≤—ë–∑–¥\n" \
                    f"–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: <s>{total}‚ÇΩ</s> <b>{discounted_total}‚ÇΩ</b> (—Å–∫–∏–¥–∫–∞ {discount}%)\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–∫—É–ø–∫—É?"
    else:
        await state.update_data(amount=amount, total=total)
        price_text = f"–í—ã –≤—ã–±—Ä–∞–ª–∏: <b>{amount}</b> –∑–≤—ë–∑–¥\n–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: <b>{total}‚ÇΩ</b>\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–∫—É–ø–∫—É?"
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="buy_stars_self_confirm")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="buy_stars_self_cancel")]
    ])
    await message.answer(price_text, reply_markup=kb, parse_mode="HTML")
    await state.set_state(BuyStarsConfirmStates.waiting_for_confirm)

async def create_fragment_order(quantity, username, api_key=None, show_sender=False):
    from config import load_config
    config = load_config()
    url = "https://api.fragment-api.com/v1/order/stars/"
    username = username.lstrip("@") if username else ""
    data = {
        "username": username,
        "quantity": quantity,
        "show_sender": False
    }
    jwt_token = await get_jwt_token(config)
    headers = {
        "Accept": "application/json",
        "Authorization": f"JWT {jwt_token}",
        "Content-Type": "application/json"
    }
    async with httpx.AsyncClient(timeout=30.0) as client:
        resp = await client.post(url, json=data, headers=headers)
        resp.raise_for_status()
        return resp.json()

@router.callback_query(F.data == "buy_stars_self_confirm")
async def buy_stars_self_confirm_callback(call: CallbackQuery, state: FSMContext, db_pool):
    if not call.from_user.username:
        await call.message.answer("–£ –≤–∞—Å –Ω–µ—Ç—É –ª–æ–≥–∏–Ω–∞ –≤ —Ç–≥, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
        await state.clear()
        return
    await call.answer()
    data = await state.get_data()
    amount = data.get("amount")
    total = data.get("total")
    if total is None or amount is None:
        await call.message.answer(
            "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—É–º–º—É –ø–æ–∫—É–ø–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="main_menu")]
            ]),
            parse_mode="HTML"
        )
        await state.clear()
        return
    user = await get_or_create_user(db_pool, call.from_user.id, call.from_user.username)
    if float(user["balance"]) < total:
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="profile_topup")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="buy_stars_self")]
        ])
        balance_str = f"–í–∞—à –±–∞–ª–∞–Ω—Å: <b>{float(user['balance'])}‚ÇΩ</b>"
        await call.message.answer(
            f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!\n{balance_str}\n–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç: <b>{total - float(user['balance'])}‚ÇΩ</b>",
            reply_markup=kb,
            parse_mode="HTML"
        )
        await state.clear()
        return
    
    # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ –∏ –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
    from config import load_config
    config = load_config()
    await call.message.answer_photo(
        config.welcome_image_url,
        caption=config.welcome_description,
        reply_markup=main_menu_kb(call.from_user.id),
        parse_mode="HTML"
    )
    # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞
    await call.message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É ‚úÖ\n–ó–≤—ë–∑–¥—ã –ø—Ä–∏–¥—É—Ç –≤ —Ç–µ—á–µ–Ω–∏–∏ 5 –º–∏–Ω—É—Ç ‚≠êÔ∏è\n\n–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª –ª—É—á—à–∞—è –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å –¥–ª—è –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ ‚ù§Ô∏è\n\n@BuysStarsNews", parse_mode="HTML")
    # –°–ø–∏—Å—ã–≤–∞—é –±–∞–ª–∞–Ω—Å
    async with db_pool.acquire() as conn:
        await conn.execute("UPDATE users SET balance = balance - $1, username = $2 WHERE telegram_id=$3", total, call.from_user.username, user["telegram_id"])
        # –°–±—Ä–æ—Å —Å–∫–∏–¥–∫–∏ –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏
        await conn.execute("UPDATE users SET discount=NULL WHERE telegram_id=$1", user["telegram_id"])
    # –û—Ñ–æ—Ä–º–ª—è—é –∑–∞–∫–∞–∑ –≤ —Ñ–æ–Ω–µ
    asyncio.create_task(create_fragment_order(amount, call.from_user.username))
    await state.clear()
    return

@router.callback_query(F.data == "buy_stars_self_cancel")
async def buy_stars_self_cancel_callback(call: CallbackQuery, state: FSMContext):
    await state.clear()
    from config import load_config
    config = load_config()
    from handlers.start import main_menu_kb
    await call.message.answer_photo(
        config.welcome_image_url,
        caption=config.welcome_description,
        reply_markup=main_menu_kb(call.from_user.id),
        parse_mode="HTML"
    )
    await call.answer()

def get_packs_kb(page: int, prefix: str, star_price, discount=None):
    start = page * PACKS_PER_PAGE
    end = start + PACKS_PER_PAGE
    packs = STAR_PACKS[start:end]
    kb = []
    for amount in packs:
        price = round(amount * star_price, 2)
        if discount:
            discounted_price = round(price * (1 - float(discount) / 100), 2)
            btn_text = f"‚≠ê {amount:,} Stars ‚Äî {price}‚ÇΩ ‚Üí {discounted_price}‚ÇΩ (-{discount}%)"
        else:
            btn_text = f"‚≠ê {amount:,} Stars ‚Äî {price}‚ÇΩ"
        kb.append([InlineKeyboardButton(text=btn_text, callback_data=f"{prefix}_pack_{amount}")])
    nav = []
    if page > 0:
        nav.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"{prefix}_packs_page_{page-1}"))
    if end < len(STAR_PACKS):
        nav.append(InlineKeyboardButton(text="–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"{prefix}_packs_page_{page+1}"))
    if nav:
        kb.append(nav)
    kb.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"{prefix}")])
    return InlineKeyboardMarkup(inline_keyboard=kb)

@router.callback_query(F.data == "buy_stars_self_packs")
async def buy_stars_self_packs_callback(call: CallbackQuery, state: FSMContext, db_pool):
    user = await get_or_create_user(db_pool, call.from_user.id, call.from_user.username)
    star_price = await get_star_price(db_pool)
    discount = user.get("discount")
    await call.message.edit_caption(
        caption="<b>–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ç–æ–≤—ã–π –ø–∞–∫–µ—Ç –∑–≤—ë–∑–¥:</b>",
        reply_markup=get_packs_kb(0, "buy_stars_self", star_price, discount),
        parse_mode="HTML"
    )
    await call.answer()

@router.callback_query(F.data.startswith("buy_stars_self_packs_page_"))
async def buy_stars_self_packs_page_callback(call: CallbackQuery, state: FSMContext, db_pool):
    user = await get_or_create_user(db_pool, call.from_user.id, call.from_user.username)
    page = int(call.data.split("_")[-1])
    star_price = await get_star_price(db_pool)
    discount = user.get("discount")
    await call.message.edit_caption(
        caption="<b>–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ç–æ–≤—ã–π –ø–∞–∫–µ—Ç –∑–≤—ë–∑–¥:</b>",
        reply_markup=get_packs_kb(page, "buy_stars_self", star_price, discount),
        parse_mode="HTML"
    )
    await call.answer()

@router.callback_query(F.data.startswith("buy_stars_self_pack_"))
async def buy_stars_self_pack_selected(call: CallbackQuery, state: FSMContext, db_pool):
    user = await get_or_create_user(db_pool, call.from_user.id, call.from_user.username)
    amount = int(call.data.split("_")[-1])
    star_price = await get_star_price(db_pool)
    total = round(amount * star_price, 2)
    discount = user.get("discount")
    if discount:
        discount = float(discount)
        discounted_total = round(total * (1 - discount / 100), 2)
        await state.update_data(amount=amount, total=discounted_total, original_total=total)
        price_text = (
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–∞–∫–µ—Ç: <b>{amount}</b> –∑–≤—ë–∑–¥\n"
            f"–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total}‚ÇΩ ‚Üí <b>{discounted_total}‚ÇΩ</b> (—Å–∫–∏–¥–∫–∞ {discount}%)\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–∫—É–ø–∫—É?"
        )
    else:
        await state.update_data(amount=amount, total=total)
        price_text = (
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–∞–∫–µ—Ç: <b>{amount}</b> –∑–≤—ë–∑–¥\n"
            f"–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: <b>{total}‚ÇΩ</b>\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–∫—É–ø–∫—É?"
        )
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="buy_stars_self_confirm")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="buy_stars_self_cancel")]
    ])
    await call.message.edit_caption(
        caption=price_text,
        reply_markup=kb,
        parse_mode="HTML"
    )
    await state.set_state(BuyStarsConfirmStates.waiting_for_confirm)
    await call.answer()

@router.callback_query(F.data == "buy_stars_gift")
async def buy_stars_gift_callback(call: CallbackQuery, state: FSMContext):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="buy_stars")]
    ])
    text = "<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ª–æ–≥–∏–Ω (@username) –∏–ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–∞—Ä–∏—Ç—å –∑–≤—ë–∑–¥—ã.</b>"
    if getattr(call.message, "content_type", None) == "photo":
        await call.message.edit_caption(
            caption=text,
            reply_markup=kb,
            parse_mode="HTML"
        )
    else:
        await call.message.edit_text(
            text,
            reply_markup=kb,
            parse_mode="HTML"
        )
    await state.set_state(BuyStarsGiftStates.waiting_for_recipient)
    await call.answer()

@router.message(BuyStarsGiftStates.waiting_for_recipient)
async def process_gift_recipient(message: Message, state: FSMContext):
    await state.update_data(recipient=message.text.strip())
    await message.answer(f"–í—ã —É–∫–∞–∑–∞–ª–∏: <code>{message.text}</code>\n–ö–æ–º—É —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–∞—Ä–∏—Ç—å –∑–≤—ë–∑–¥—ã?\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–±:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üî¢ –í–≤–µ—Å—Ç–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", callback_data="buy_stars_gift_amount"),
                InlineKeyboardButton(text="üì¶ –ì–æ—Ç–æ–≤—ã–µ –ø–∞–∫–∏", callback_data="buy_stars_gift_packs")
            ],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="buy_stars")]
        ]),
        parse_mode="HTML")
    await state.set_state(BuyStarsGiftStates.waiting_for_gift_amount)

@router.callback_query(F.data == "buy_stars_gift_amount")
async def buy_stars_gift_amount_callback(call: CallbackQuery, state: FSMContext):
    text = "<b>–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥ –¥–ª—è –ø–æ–¥–∞—Ä–∫–∞ (–º–∏–Ω–∏–º—É–º 50):</b>"
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="buy_stars_gift_packs")]
    ])
    if getattr(call.message, "content_type", None) == "photo":
        await call.message.edit_caption(
            caption=text,
            reply_markup=kb,
            parse_mode="HTML"
        )
    else:
        await call.message.edit_text(
            text,
            reply_markup=kb,
            parse_mode="HTML"
        )
    await state.set_state(BuyStarsGiftStates.waiting_for_gift_amount)
    await call.answer()

@router.callback_query(F.data == "buy_stars_gift_packs")
async def buy_stars_gift_packs_callback(call: CallbackQuery, state: FSMContext, db_pool):
    user = await get_or_create_user(db_pool, call.from_user.id, call.from_user.username)
    star_price = await get_star_price(db_pool)
    discount = user.get("discount")
    await call.message.edit_text(
        "<b>–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ç–æ–≤—ã–π –ø–∞–∫–µ—Ç –∑–≤—ë–∑–¥ –¥–ª—è –ø–æ–¥–∞—Ä–∫–∞:</b>",
        reply_markup=get_packs_kb(0, "buy_stars_gift", star_price, discount),
        parse_mode="HTML"
    )
    await call.answer()

@router.callback_query(F.data.startswith("buy_stars_gift_packs_page_"))
async def buy_stars_gift_packs_page_callback(call: CallbackQuery, state: FSMContext, db_pool):
    user = await get_or_create_user(db_pool, call.from_user.id, call.from_user.username)
    page = int(call.data.split("_")[-1])
    star_price = await get_star_price(db_pool)
    discount = user.get("discount")
    await call.message.edit_text(
        "<b>–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ç–æ–≤—ã–π –ø–∞–∫–µ—Ç –∑–≤—ë–∑–¥ –¥–ª—è –ø–æ–¥–∞—Ä–∫–∞:</b>",
        reply_markup=get_packs_kb(page, "buy_stars_gift", star_price, discount),
        parse_mode="HTML"
    )
    await call.answer()

@router.callback_query(F.data.startswith("buy_stars_gift_pack_"))
async def buy_stars_gift_pack_selected(call: CallbackQuery, state: FSMContext, db_pool):
    user = await get_or_create_user(db_pool, call.from_user.id, call.from_user.username)
    amount = int(call.data.split("_")[-1])
    star_price = await get_star_price(db_pool)
    total = round(amount * star_price, 2)
    discount = user.get("discount")
    data = await state.get_data()
    recipient = data.get("recipient")
    if not recipient:
        recipient = call.from_user.username or call.from_user.id or "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    if discount:
        discount = float(discount)
        discounted_total = round(total * (1 - discount / 100), 2)
        await state.update_data(amount=amount, total=discounted_total, original_total=total)
        price_text = (
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–∞–∫–µ—Ç –¥–ª—è –ø–æ–¥–∞—Ä–∫–∞: <b>{amount}</b> –∑–≤—ë–∑–¥\n"
            f"–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total}‚ÇΩ ‚Üí <b>{discounted_total}‚ÇΩ</b> (—Å–∫–∏–¥–∫–∞ {discount}%)\n"
            f"–ö–æ–º—É: <code>{recipient}</code>\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–∫—É–ø–∫—É?"
        )
    else:
        await state.update_data(amount=amount, total=total)
        price_text = (
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–∞–∫–µ—Ç –¥–ª—è –ø–æ–¥–∞—Ä–∫–∞: <b>{amount}</b> –∑–≤—ë–∑–¥\n"
            f"–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: <b>{total}‚ÇΩ</b>\n"
            f"–ö–æ–º—É: <code>{recipient}</code>\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–∫—É–ø–∫—É?"
        )
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="buy_stars_gift_confirm")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="buy_stars_gift_cancel")]
    ])
    await call.message.edit_text(
        price_text,
        reply_markup=kb,
        parse_mode="HTML"
    )
    await state.set_state(BuyStarsConfirmStates.waiting_for_gift_confirm)
    await call.answer()

@router.message(BuyStarsGiftStates.waiting_for_gift_amount)
async def process_gift_amount(message: Message, state: FSMContext, db_pool):
    try:
        amount = int(message.text)
    except ValueError:
        await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ (–º–∏–Ω–∏–º—É–º 50):")
        return
    if amount < 50:
        await message.answer("‚ùó –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø–æ–¥–∞—Ä–∫–∞ ‚Äî 50 –∑–≤—ë–∑–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    star_price = await get_star_price(db_pool)
    total = round(amount * star_price, 2)
    data = await state.get_data()
    recipient = data.get("recipient")
    if not recipient:
        # –ï—Å–ª–∏ recipient –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–±—É–µ–º –≤–∑—è—Ç—å –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        # (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–æ–ª—å–∫–æ —á—Ç–æ –≤–≤—ë–ª –ª–æ–≥–∏–Ω)
        # –û–±—ã—á–Ω–æ recipient –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ state, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π:
        recipient = message.from_user.username or message.from_user.id or "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    discount = data.get("active_discount")
    if not discount:
        user = await get_or_create_user(db_pool, message.from_user.id, message.from_user.username)
        discount = user.get("discount")
    if discount:
        discount = float(discount)
        discounted_total = round(total * (1 - discount / 100), 2)
        await state.update_data(amount=amount, total=discounted_total, original_total=total)
        price_text = (
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏: <b>{amount}</b> –∑–≤—ë–∑–¥ –¥–ª—è –ø–æ–¥–∞—Ä–∫–∞\n"
            f"–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: <s>{total}‚ÇΩ</s> <b>{discounted_total}‚ÇΩ</b> (—Å–∫–∏–¥–∫–∞ {discount}%)\n"
            f"–ö–æ–º—É: <code>{recipient}</code>\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–∫—É–ø–∫—É?"
        )
    else:
        await state.update_data(amount=amount, total=total)
        price_text = (
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏: <b>{amount}</b> –∑–≤—ë–∑–¥ –¥–ª—è –ø–æ–¥–∞—Ä–∫–∞\n"
            f"–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: <b>{total}‚ÇΩ</b>\n"
            f"–ö–æ–º—É: <code>{recipient}</code>\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–∫—É–ø–∫—É?"
        )
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="buy_stars_gift_confirm")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="buy_stars_gift_cancel")]
    ])
    await message.answer(price_text, reply_markup=kb, parse_mode="HTML")
    await state.set_state(BuyStarsConfirmStates.waiting_for_gift_confirm)

@router.callback_query(F.data == "buy_stars_gift_confirm")
async def buy_stars_gift_confirm_callback(call: CallbackQuery, state: FSMContext, db_pool):
    await call.answer()
    data = await state.get_data()
    amount = data.get("amount")
    total = data.get("total")
    recipient = data.get("recipient")
    if total is None or amount is None or recipient is None:
        await call.message.answer(
            "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∞—Ä–∏—Ñ –∏–ª–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="main_menu")]
            ])
        )
        await state.clear()
        return
    user = await get_or_create_user(db_pool, call.from_user.id, call.from_user.username)
    if float(user["balance"]) < total:
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="profile_topup")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="buy_stars_gift")]
        ])
        balance_str = f"–í–∞—à –±–∞–ª–∞–Ω—Å: <b>{float(user['balance'])}‚ÇΩ</b>"
        await call.message.answer(
            f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!\n{balance_str}\n–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç: <b>{total - float(user['balance'])}‚ÇΩ</b>",
            reply_markup=kb,
            parse_mode="HTML"
        )
        await state.clear()
        return
    async with db_pool.acquire() as conn:
        await conn.execute("UPDATE users SET balance = balance - $1 WHERE telegram_id=$2", total, user["telegram_id"])
    # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –ø–æ–¥–∞—Ä–∫–∞
    await call.message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É ‚úÖ\n–ó–≤—ë–∑–¥—ã –ø—Ä–∏–¥—É—Ç –≤ —Ç–µ—á–µ–Ω–∏–∏ 5 –º–∏–Ω—É—Ç ‚≠êÔ∏è\n\n–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª –ª—É—á—à–∞—è –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å –¥–ª—è –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ ‚ù§Ô∏è\n\n@BuysStarsNews", parse_mode="HTML")
    # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ –∏ –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
    from config import load_config
    config = load_config()
    await call.message.answer_photo(
        config.welcome_image_url,
        caption=config.welcome_description,
        reply_markup=main_menu_kb(call.from_user.id),
        parse_mode="HTML"
    )
    # –û—Ñ–æ—Ä–º–ª—è—é –∑–∞–∫–∞–∑ –≤ —Ñ–æ–Ω–µ
    data = await state.get_data()
    plan_index = data.get("plan_index")
    plan = PREMIUM_PLANS[plan_index]
    months = plan["duration"] // 30
    asyncio.create_task(create_fragment_gift_premium(recipient, months, config))
    # –°–±—Ä–æ—Å —Å–∫–∏–¥–∫–∏ –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏
    await state.update_data(active_discount=None)
    await state.clear()

@router.callback_query(F.data == "buy_stars_gift_cancel")
async def buy_stars_gift_cancel_callback(call: CallbackQuery, state: FSMContext):
    await state.clear()
    await call.message.answer_photo(
        config.welcome_image_url,
        caption=config.welcome_description,
        reply_markup=main_menu_kb(call.from_user.id),
        parse_mode="HTML"
    )
    await call.answer()

async def get_jwt_token(config):
    global _jwt_token_cache, _jwt_token_expire
    if getattr(config, 'fragment_jwt_token', None):
        return config.fragment_jwt_token
    now = time.time()
    if _jwt_token_cache and now < _jwt_token_expire:
        return _jwt_token_cache
    url = "https://api.fragment-api.com/v1/auth/authenticate/"
    payload = {
        "api_key": config.fragment_api_key,
        "phone_number": config.fragment_phone_number,
        "mnemonics": config.fragment_mnemonics.split()
    }
    headers = {
        "Content-Type": "application/json",
        "Accept": "application/json"
    }
    try:
        async with httpx.AsyncClient(timeout=30.0) as client:
            resp = await client.post(url, json=payload, headers=headers)
            resp.raise_for_status()
            resp_json = resp.json()
            token = resp_json["token"]
            expires_in = resp_json.get("expires_in", 3600)
            _jwt_token_cache = token
            _jwt_token_expire = time.time() + expires_in - 30
            return token
    except Exception as e:
        raise

async def create_fragment_gift_premium(username, months, config):
    url = "https://api.fragment-api.com/v1/order/premium/"
    username = username.lstrip("@") if username else ""
    data = {
        "username": username,
        "months": months
    }
    jwt_token = await get_jwt_token(config)
    headers = {
        "Accept": "application/json",
        "Authorization": f"JWT {jwt_token}",
        "Content-Type": "application/json"
    }
    async with httpx.AsyncClient(timeout=30.0) as client:
        resp = await client.post(url, json=data, headers=headers)
        resp.raise_for_status()
        return resp.json()

class BuyPremiumStates(StatesGroup):
    waiting_for_self_or_gift = State()
    waiting_for_gift_recipient = State()
    waiting_for_self_plan = State()
    waiting_for_gift_plan = State()
    waiting_for_self_confirm = State()
    waiting_for_gift_confirm = State()

@router.callback_query(F.data == "buy_premium")
async def buy_premium_callback(call: CallbackQuery, state: FSMContext):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üßë‚Äçüíº –°–µ–±–µ", callback_data="buy_premium_self"),
            InlineKeyboardButton(text="üéÅ –î—Ä—É–≥–æ–º—É", callback_data="buy_premium_gift")
        ],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ])
    text = "<b>–ö—É–ø–∏—Ç—å –ø—Ä–µ–º–∏—É–º</b>\n\n–ö–æ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å –ø—Ä–µ–º–∏—É–º?"
    if getattr(call.message, "content_type", None) == "photo":
        await call.message.edit_caption(
            caption=text,
            reply_markup=kb,
            parse_mode="HTML"
        )
    else:
        await call.message.edit_text(
            text,
            reply_markup=kb,
            parse_mode="HTML"
        )
    await state.set_state(BuyPremiumStates.waiting_for_self_or_gift)
    await call.answer()

@router.callback_query(F.data == "buy_premium_self")
async def buy_premium_self_callback(call: CallbackQuery, state: FSMContext, db_pool):
    user = await get_or_create_user(db_pool, call.from_user.id, call.from_user.username)
    premium_prices = await get_premium_prices(db_pool)
    discount = user.get("discount")
    kb = []
    for i, plan in enumerate(PREMIUM_PLANS):
        price = premium_prices[i]
        if discount:
            discounted_price = round(price * (1 - float(discount) / 100), 2)
            btn_text = f"üíé {plan['name']} ‚Äî {price}‚ÇΩ ‚Üí {discounted_price}‚ÇΩ (-{discount}%)"
        else:
            btn_text = f"üíé {plan['name']} ‚Äî {price}‚ÇΩ"
        kb.append([
            InlineKeyboardButton(
                text=btn_text,
                callback_data=f"buy_premium_self_plan_{i}"
            )
        ])
    kb.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="buy_premium")])
    markup = InlineKeyboardMarkup(inline_keyboard=kb)
    text = "<b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –¥–ª—è —Å–µ–±—è:</b>"
    if call.message.content_type == "photo":
        await call.message.edit_caption(
            caption=text,
            reply_markup=markup,
            parse_mode="HTML"
        )
    else:
        await call.message.edit_text(
            text,
            reply_markup=markup,
            parse_mode="HTML"
        )
    await state.set_state(BuyPremiumStates.waiting_for_self_plan)
    await call.answer()

@router.callback_query(F.data.startswith("buy_premium_self_plan_"))
async def buy_premium_self_plan_selected(call: CallbackQuery, state: FSMContext, db_pool):
    user = await get_or_create_user(db_pool, call.from_user.id, call.from_user.username)
    plan_index = int(call.data.split("_")[-1])
    plan = PREMIUM_PLANS[plan_index]
    premium_prices = await get_premium_prices(db_pool)
    price = premium_prices[plan_index]
    discount = user.get("discount")
    if discount:
        discount = float(discount)
        discounted_price = round(price * (1 - discount / 100), 2)
        await state.update_data(plan_index=plan_index, total=discounted_price, original_total=price)
        text = (
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–∞—Ä–∏—Ñ –¥–ª—è —Å–µ–±—è:\n"
            f"<b>{plan['name']}</b>\n"
            f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {price}‚ÇΩ ‚Üí <b>{discounted_price}‚ÇΩ</b> (—Å–∫–∏–¥–∫–∞ {discount}%)\n\n"
            f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–∫—É–ø–∫—É?"
        )
    else:
        await state.update_data(plan_index=plan_index, total=price)
        text = (
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–∞—Ä–∏—Ñ –¥–ª—è —Å–µ–±—è:\n"
            f"<b>{plan['name']}</b>\n"
            f"–°—Ç–æ–∏–º–æ—Å—Ç—å: <b>{price}‚ÇΩ</b>\n\n"
            f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–∫—É–ø–∫—É?"
        )
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="buy_premium_self_confirm")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="buy_premium_cancel")]
    ])
    if call.message.content_type == "photo":
        await call.message.edit_caption(
            caption=text,
            reply_markup=kb,
            parse_mode="HTML"
        )
    else:
        await call.message.edit_text(
            text,
            reply_markup=kb,
            parse_mode="HTML"
        )
    await state.set_state(BuyPremiumStates.waiting_for_self_confirm)
    await call.answer()

@router.callback_query(F.data == "buy_premium_self_confirm")
async def buy_premium_self_confirm_callback(call: CallbackQuery, state: FSMContext, db_pool):
    from config import load_config
    config = load_config()
    if not call.from_user.username:
        await call.message.answer("–£ –≤–∞—Å –Ω–µ—Ç—É –ª–æ–≥–∏–Ω–∞ –≤ —Ç–≥, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
        await state.clear()
        return
    data = await state.get_data()
    plan_index = data.get("plan_index")
    total = data.get("total")
    if plan_index is None or total is None:
        await call.message.answer(
            "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∞—Ä–∏—Ñ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="main_menu")]
            ])
        )
        await state.clear()
        return
    plan = PREMIUM_PLANS[plan_index]
    user = await get_or_create_user(db_pool, call.from_user.id, call.from_user.username)
    if float(user["balance"]) < total:
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="profile_topup")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="buy_premium_self")]
        ])
        balance_str = f"–í–∞—à –±–∞–ª–∞–Ω—Å: <b>{float(user['balance'])}‚ÇΩ</b>"
        await call.message.answer(
            f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!\n{balance_str}\n–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç: <b>{total - float(user['balance'])}‚ÇΩ</b>",
            reply_markup=kb,
            parse_mode="HTML"
        )
        await state.clear()
        return
    async with db_pool.acquire() as conn:
        await conn.execute(
            "UPDATE users SET balance = balance - $1, username = $2 WHERE telegram_id = $3",
            total, call.from_user.username, user["telegram_id"]
        )
    await call.message.answer(
        f"‚úÖ –ü—Ä–µ–º–∏—É–º —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n"
        f"–¢–∞—Ä–∏—Ñ: <b>{plan['name']}</b>\n"
        f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: <b>{plan['duration']} –¥–Ω–µ–π</b>",
        parse_mode="HTML"
    )
    # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ –∏ –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
    await call.message.answer_photo(
        config.welcome_image_url,
        caption=config.welcome_description,
        reply_markup=main_menu_kb(call.from_user.id),
        parse_mode="HTML"
    )
    # –í—ã–∑–æ–≤ Fragment API –≤ —Ñ–æ–Ω–µ
    async def _activate_premium_bg():
        try:
            months = plan["duration"] // 30
            await create_fragment_gift_premium(call.from_user.username, months, config)
        except Exception as e:
            print(f"[Fragment API] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–µ–º–∏—É–º–∞: {e}")
    asyncio.create_task(_activate_premium_bg())
    # –°–±—Ä–æ—Å —Å–∫–∏–¥–∫–∏ –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏
    await state.update_data(active_discount=None)
    await state.clear()

@router.callback_query(F.data == "buy_premium_gift")
async def buy_premium_gift_callback(call: CallbackQuery, state: FSMContext):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="buy_premium")]
    ])
    text = "<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ª–æ–≥–∏–Ω (@username) –∏–ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–∞—Ä–∏—Ç—å –ø—Ä–µ–º–∏—É–º.</b>"
    if getattr(call.message, "content_type", None) == "photo":
        await call.message.edit_caption(
            caption=text,
            reply_markup=kb,
            parse_mode="HTML"
        )
    else:
        await call.message.edit_text(
            text,
            reply_markup=kb,
            parse_mode="HTML"
        )
    await state.set_state(BuyPremiumStates.waiting_for_gift_recipient)
    await call.answer()

@router.message(BuyPremiumStates.waiting_for_gift_recipient)
async def process_premium_gift_recipient(message: Message, state: FSMContext, db_pool):
    await state.update_data(recipient=message.text.strip())
    user = await get_or_create_user(db_pool, message.from_user.id, message.from_user.username)
    premium_prices = await get_premium_prices(db_pool)
    discount = user.get("discount")
    kb = []
    for i, plan in enumerate(PREMIUM_PLANS):
        price = premium_prices[i]
        if discount:
            discounted_price = round(price * (1 - float(discount) / 100), 2)
            btn_text = f"üíé {plan['name']} ‚Äî {price}‚ÇΩ ‚Üí {discounted_price}‚ÇΩ (-{discount}%)"
        else:
            btn_text = f"üíé {plan['name']} ‚Äî {price}‚ÇΩ"
        kb.append([
            InlineKeyboardButton(
                text=btn_text,
                callback_data=f"buy_premium_gift_plan_{i}"
            )
        ])
    kb.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="buy_premium_gift")])
    await message.answer(
        "<b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –¥–ª—è –ø–æ–¥–∞—Ä–∫–∞:</b>",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=kb),
        parse_mode="HTML"
    )
    await state.set_state(BuyPremiumStates.waiting_for_gift_plan)

@router.callback_query(F.data.startswith("buy_premium_gift_plan_"))
async def buy_premium_gift_plan_selected(call: CallbackQuery, state: FSMContext, db_pool):
    user = await get_or_create_user(db_pool, call.from_user.id, call.from_user.username)
    plan_index = int(call.data.split("_")[-1])
    plan = PREMIUM_PLANS[plan_index]
    premium_prices = await get_premium_prices(db_pool)
    price = premium_prices[plan_index]
    discount = user.get("discount")
    data = await state.get_data()
    recipient = data.get("recipient")
    if discount:
        discount = float(discount)
        discounted_price = round(price * (1 - discount / 100), 2)
        await state.update_data(plan_index=plan_index, total=discounted_price, original_total=price)
        text = (
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–∞—Ä–∏—Ñ –¥–ª—è –ø–æ–¥–∞—Ä–∫–∞:\n"
            f"<b>{plan['name']}</b>\n"
            f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {price}‚ÇΩ ‚Üí <b>{discounted_price}‚ÇΩ</b> (—Å–∫–∏–¥–∫–∞ {discount}%)\n"
            f"–ö–æ–º—É: <code>{recipient}</code>\n\n"
            f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–∫—É–ø–∫—É?"
        )
    else:
        await state.update_data(plan_index=plan_index, total=price)
        text = (
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–∞—Ä–∏—Ñ –¥–ª—è –ø–æ–¥–∞—Ä–∫–∞:\n"
            f"<b>{plan['name']}</b>\n"
            f"–°—Ç–æ–∏–º–æ—Å—Ç—å: <b>{price}‚ÇΩ</b>\n"
            f"–ö–æ–º—É: <code>{recipient}</code>\n\n"
            f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–∫—É–ø–∫—É?"
        )
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="buy_premium_gift_confirm")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="buy_premium_cancel")]
    ])
    await call.message.edit_text(
        text,
        reply_markup=kb,
        parse_mode="HTML"
    )
    await state.set_state(BuyPremiumStates.waiting_for_gift_confirm)
    await call.answer()

@router.callback_query(F.data == "buy_premium_gift_confirm")
async def buy_premium_gift_confirm_callback(call: CallbackQuery, state: FSMContext, db_pool):
    from config import load_config
    config = load_config()
    data = await state.get_data()
    plan_index = data.get("plan_index")
    recipient = data.get("recipient")
    total = data.get("total")
    if plan_index is None or recipient is None or total is None:
        await call.message.answer(
            "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∞—Ä–∏—Ñ –∏–ª–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="main_menu")]
            ])
        )
        await state.clear()
        return
    plan = PREMIUM_PLANS[plan_index]
    months = plan["duration"] // 30
    user = await get_or_create_user(db_pool, call.from_user.id, call.from_user.username)
    if float(user["balance"]) < total:
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="profile_topup")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="buy_premium_gift")]
        ])
        balance_str = f"–í–∞—à –±–∞–ª–∞–Ω—Å: <b>{float(user['balance'])}‚ÇΩ</b>"
        await call.message.answer(
            f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!\n{balance_str}\n–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç: <b>{total - float(user['balance'])}‚ÇΩ</b>",
            reply_markup=kb,
            parse_mode="HTML"
        )
        await state.clear()
        return
    async with db_pool.acquire() as conn:
        await conn.execute("UPDATE users SET balance = balance - $1 WHERE telegram_id=$2", total, user["telegram_id"])
    # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ –∏ –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
    await call.message.answer_photo(
        config.welcome_image_url,
        caption=config.welcome_description,
        reply_markup=main_menu_kb(call.from_user.id),
        parse_mode="HTML"
    )
    # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞
    await call.message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É ‚úÖ\n–ó–≤—ë–∑–¥—ã –ø—Ä–∏–¥—É—Ç –≤ —Ç–µ—á–µ–Ω–∏–∏ 5 –º–∏–Ω—É—Ç ‚≠êÔ∏è\n\n–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª –ª—É—á—à–∞—è –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å –¥–ª—è –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ ‚ù§Ô∏è\n\n@BuysStarsNews", parse_mode="HTML")
    # –û—Ñ–æ—Ä–º–ª—è—é –∑–∞–∫–∞–∑ –≤ —Ñ–æ–Ω–µ
    asyncio.create_task(create_fragment_gift_premium(recipient, months, config))
    # –°–±—Ä–æ—Å —Å–∫–∏–¥–∫–∏ –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏
    await state.update_data(active_discount=None)
    await state.clear()

@router.callback_query(F.data == "buy_premium_cancel")
async def buy_premium_cancel_callback(call: CallbackQuery, state: FSMContext):
    await state.clear()
    await call.message.answer_photo(
        config.welcome_image_url,
        caption=config.welcome_description,
        reply_markup=main_menu_kb(call.from_user.id),
        parse_mode="HTML"
    )
    await call.answer()

@router.callback_query(F.data == "admin_panel")
async def admin_panel_callback(call: CallbackQuery):
    from config import load_config
    config = load_config()
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞–º–∏", callback_data="admin_balances")],
        [InlineKeyboardButton(text="–ü—Ä–æ–º–æ–∫–æ–¥—ã", callback_data="admin_promos")],
        [InlineKeyboardButton(text="–†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast")],
        [InlineKeyboardButton(text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ü–µ–Ω–∞–º–∏", callback_data="admin_prices")],
        [InlineKeyboardButton(text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è", callback_data="admin_payment_settings")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="main_menu")],
    ])
    text = "<b>‚öôÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    try:
        await call.message.delete()
    except Exception:
        pass
    await call.message.answer_photo(
        config.welcome_image_url,
        caption=text,
        reply_markup=kb,
        parse_mode="HTML"
    )
    await call.answer()

class AdminBalanceStates(StatesGroup):
    waiting_for_user = State()
    waiting_for_amount = State()

@router.callback_query(F.data == "admin_balances")
async def admin_balances_start(call: CallbackQuery, state: FSMContext):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")]
    ])
    text = "<b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–º</b>\n\n–í–≤–µ–¥–∏—Ç–µ username (–±–µ–∑ @) –∏–ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:"
    try:
        await call.message.edit_caption(
            caption=text,
            reply_markup=kb,
            parse_mode="HTML"
        )
    except TelegramBadRequest:
        from config import load_config
        config = load_config()
        await call.message.delete()
        await call.message.answer_photo(
            config.welcome_image_url,
            caption=text,
            reply_markup=kb,
            parse_mode="HTML"
        )
    await state.set_state(AdminBalanceStates.waiting_for_user)
    await call.answer()

@router.message(AdminBalanceStates.waiting_for_user)
async def admin_balance_get_user(message: Message, state: FSMContext, db_pool):
    text = message.text.strip()
    user = None
    if text.isdigit():
        async with db_pool.acquire() as conn:
            user = await conn.fetchrow("SELECT * FROM users WHERE telegram_id=$1", int(text))
    else:
        async with db_pool.acquire() as conn:
            user = await conn.fetchrow("SELECT * FROM users WHERE username=$1", text)
    if not user:
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")]
        ])
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ù–∞–∑–∞–¥'.", reply_markup=kb)
        return
    await state.update_data(target_user_id=user['telegram_id'])
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_balances")]
    ])
    await message.answer(
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <b>{user['username'] or user['telegram_id']}</b>\n–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: <b>{user['balance']} ‚ÇΩ</b>\n\n–í–≤–µ–¥–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, +100 –∏–ª–∏ -100):",
        reply_markup=kb,
        parse_mode="HTML"
    )
    await state.set_state(AdminBalanceStates.waiting_for_amount)

@router.message(AdminBalanceStates.waiting_for_amount)
async def admin_balance_change(message: Message, state: FSMContext, db_pool):
    text = message.text.strip().replace(' ', '')
    if not (text.startswith('+') or text.startswith('-')) or not text[1:].isdigit():
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_balances")]
        ])
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, +100 –∏–ª–∏ -100):", reply_markup=kb)
        return
    amount = int(text)
    data = await state.get_data()
    target_user_id = data.get('target_user_id')
    if not target_user_id:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.")
        await state.clear()
        return
    async with db_pool.acquire() as conn:
        await conn.execute("UPDATE users SET balance = balance + $1 WHERE telegram_id=$2", amount, target_user_id)
        user = await conn.fetchrow("SELECT * FROM users WHERE telegram_id=$1", target_user_id)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")]
    ])
    await message.answer(
        f"–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª—ë–Ω!\n–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: <b>{user['balance']} ‚ÇΩ</b>",
        reply_markup=kb,
        parse_mode="HTML"
    )
    await state.clear()

@router.callback_query(F.data == "admin_balances", AdminBalanceStates.waiting_for_amount)
async def admin_balances_back_from_amount(call: CallbackQuery, state: FSMContext):
    await state.clear()
    await admin_panel_callback(call)

class PromoStates(StatesGroup):
    menu = State()
    create_choose_name = State()
    create_input_name = State()
    create_choose_type = State()  # <--- –¥–æ–±–∞–≤–ª—è—é —ç—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    create_input_sum = State()
    create_choose_limit = State()
    create_input_uses = State()
    create_input_time = State()
    delete_choose = State()
    show_active = State()
    show_stats = State()

@router.callback_query(F.data == "admin_promos")
async def admin_promos_menu(call: CallbackQuery, state: FSMContext):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="promo_create")],
        [InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="promo_delete")],
        [InlineKeyboardButton(text="–ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã", callback_data="promo_active")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")],
    ])
    text = "<b>–ü—Ä–æ–º–æ–∫–æ–¥—ã</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    if call.message.content_type == "photo":
        await call.message.edit_caption(caption=text, reply_markup=kb, parse_mode="HTML")
    else:
        await call.message.edit_text(text, reply_markup=kb, parse_mode="HTML")
    await state.set_state(PromoStates.menu)
    await call.answer()

@router.callback_query(F.data == "promo_create", PromoStates.menu)
async def promo_create_choose_type(call: CallbackQuery, state: FSMContext):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ (‚ÇΩ)", callback_data="promo_type_balance")],
        [InlineKeyboardButton(text="–°–∫–∏–¥–∫–∞ (%)", callback_data="promo_type_discount")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_promos")],
    ])
    text = "<b>–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞</b>\n\n–ö–∞–∫–æ–π —Ç–∏–ø –ø—Ä–æ–º–æ–∫–æ–¥–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å?"
    if call.message.content_type == "photo":
        await call.message.edit_caption(caption=text, reply_markup=kb, parse_mode="HTML")
    else:
        await call.message.edit_text(text, reply_markup=kb, parse_mode="HTML")
    await state.set_state(PromoStates.create_choose_type)
    await call.answer()

@router.callback_query(F.data.startswith("promo_type_"), PromoStates.create_choose_type)
async def promo_create_choose_name(call: CallbackQuery, state: FSMContext):
    promo_type = call.data.replace("promo_type_", "")
    await state.update_data(promo_type=promo_type)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data="promo_gen_name")],
        [InlineKeyboardButton(text="–í–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data="promo_input_name")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="promo_create")],
    ])
    text = "<b>–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –∑–∞–¥–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è:"
    if call.message.content_type == "photo":
        await call.message.edit_caption(caption=text, reply_markup=kb, parse_mode="HTML")
    else:
        await call.message.edit_text(text, reply_markup=kb, parse_mode="HTML")
    await state.set_state(PromoStates.create_choose_name)
    await call.answer()

@router.callback_query(F.data == "promo_gen_name", PromoStates.create_choose_name)
async def promo_create_gen_name(call: CallbackQuery, state: FSMContext, db_pool):
    code = await generate_promo_code(db_pool)
    await state.update_data(promo_name=code)
    data = await state.get_data()
    promo_type = data.get("promo_type", "balance")
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="promo_create")],
    ])
    if promo_type == "discount":
        text = f"–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏ –¥–ª—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ <code>{code}</code> (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10 –¥–ª—è 10%):"
    else:
        text = f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ <code>{code}</code>:"
    await call.message.edit_caption(caption=text, reply_markup=kb, parse_mode="HTML")
    await state.set_state(PromoStates.create_input_sum)
    await call.answer()

@router.callback_query(F.data == "promo_input_name", PromoStates.create_choose_name)
async def promo_create_input_name(call: CallbackQuery, state: FSMContext):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="promo_create")],
    ])
    text = "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞:"
    await call.message.edit_caption(caption=text, reply_markup=kb, parse_mode="HTML")
    await state.set_state(PromoStates.create_input_name)
    await call.answer()

@router.callback_query(F.data == "promo_create", PromoStates.create_input_name)
async def promo_create_back_from_input_name(call: CallbackQuery, state: FSMContext):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data="promo_gen_name")],
        [InlineKeyboardButton(text="–í–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data="promo_input_name")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_promos")],
    ])
    text = "<b>–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –∑–∞–¥–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è:"
    await call.message.edit_caption(caption=text, reply_markup=kb, parse_mode="HTML")
    await state.set_state(PromoStates.create_choose_name)
    await call.answer()

@router.message(PromoStates.create_input_name)
async def promo_create_input_name_msg(message: Message, state: FSMContext, db_pool):
    code = message.text.strip().upper()
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
    async with db_pool.acquire() as conn:
        exists = await conn.fetchval("SELECT 1 FROM promo_codes WHERE code=$1", code)
    if exists:
        await message.answer("–ü—Ä–æ–º–æ–∫–æ–¥ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")
        return
    await state.update_data(promo_name=code)
    data = await state.get_data()
    promo_type = data.get("promo_type")
    if promo_type:
        # –¢–∏–ø —É–∂–µ –≤—ã–±—Ä–∞–Ω ‚Äî —Å—Ä–∞–∑—É –ø—Ä–æ—Å–∏–º —Å—É–º–º—É/–ø—Ä–æ—Ü–µ–Ω—Ç
        if promo_type == "discount":
            text = f"–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏ –¥–ª—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ <code>{code}</code> (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10 –¥–ª—è 10%):"
        else:
            text = f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ <code>{code}</code>:"
        await message.answer(text, parse_mode="HTML")
        await state.set_state(PromoStates.create_input_sum)
    else:
        # –¢–∏–ø –Ω–µ –≤—ã–±—Ä–∞–Ω ‚Äî –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ (‚ÇΩ)", callback_data="promo_type_balance")],
            [InlineKeyboardButton(text="–°–∫–∏–¥–∫–∞ (%)", callback_data="promo_type_discount")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="promo_create")],
        ])
        text = f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–º–æ–∫–æ–¥–∞ –¥–ª—è <code>{code}</code>:"
        await message.answer(text, reply_markup=kb, parse_mode="HTML")
        await state.set_state(PromoStates.create_choose_type)

@router.callback_query(F.data.startswith("promo_type_"), PromoStates.create_choose_type)
async def promo_create_choose_type(call: CallbackQuery, state: FSMContext):
    promo_type = call.data.replace("promo_type_", "")
    await state.update_data(promo_type=promo_type)
    data = await state.get_data()
    code = data.get("promo_name")
    if promo_type == "balance":
        text = f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ <code>{code}</code>:"
    else:
        text = f"–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏ –¥–ª—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ <code>{code}</code> (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10 –¥–ª—è 10%):"
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="promo_create")],
    ])
    await call.message.answer(text, reply_markup=kb, parse_mode="HTML")
    await state.set_state(PromoStates.create_input_sum)

@router.callback_query(F.data == "promo_create", PromoStates.create_input_sum)
async def promo_create_back_from_sum(call: CallbackQuery, state: FSMContext):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data="promo_gen_name")],
        [InlineKeyboardButton(text="–í–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data="promo_input_name")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_promos")],
    ])
    text = "<b>–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –∑–∞–¥–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è:"
    if call.message.content_type == "photo":
        await call.message.edit_caption(caption=text, reply_markup=kb, parse_mode="HTML")
    else:
        await call.message.edit_text(text, reply_markup=kb, parse_mode="HTML")
    await state.set_state(PromoStates.create_choose_name)
    await call.answer()

@router.message(PromoStates.create_input_sum)
async def promo_create_input_sum_msg(message: Message, state: FSMContext):
    data = await state.get_data()
    promo_type = data.get('promo_type', 'balance')
    try:
        value = float(message.text.strip().replace(',', '.'))
        if promo_type == 'discount':
            if not (1 <= value <= 100):
                raise ValueError
        else:
            if value <= 0:
                raise ValueError
    except Exception:
        if promo_type == 'discount':
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏ (–æ—Ç 1 –¥–æ 100):")
        else:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, 100 –∏–ª–∏ 250.50):")
        return
    await state.update_data(promo_sum=value)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π", callback_data="promo_limit_uses")],
        [InlineKeyboardButton(text="–ü–æ –≤—Ä–µ–º–µ–Ω–∏", callback_data="promo_limit_time")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="promo_create")],
    ])
    if promo_type == 'discount':
        text = f"–í—ã–±–µ—Ä–∏—Ç–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ (—Å–∫–∏–¥–∫–∞ <b>{value}%</b>):"
    else:
        text = f"–í—ã–±–µ—Ä–∏—Ç–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ (–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ <b>{value}‚ÇΩ</b>):"
    await message.answer(text, reply_markup=kb, parse_mode="HTML")
    await state.set_state(PromoStates.create_choose_limit)

@router.callback_query(F.data == "promo_limit_uses", PromoStates.create_choose_limit)
async def promo_create_limit_uses(call: CallbackQuery, state: FSMContext):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="promo_create")],
    ])
    text = "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π –¥–ª—è –ø—Ä–æ–º–æ–∫–æ–¥–∞:"
    if call.message.content_type == "photo":
        await call.message.edit_caption(caption=text, reply_markup=kb, parse_mode="HTML")
    else:
        await call.message.edit_text(text, reply_markup=kb, parse_mode="HTML")
    await state.set_state(PromoStates.create_input_uses)
    await call.answer()

@router.message(PromoStates.create_input_uses)
async def promo_create_input_uses_msg(message: Message, state: FSMContext, db_pool):
    try:
        uses = int(message.text.strip())
        if uses <= 0:
            raise ValueError
    except Exception:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ > 0):")
        return
    data = await state.get_data()
    await create_promo(db_pool, data['promo_name'], data['promo_sum'], data.get('promo_type', 'balance'), max_uses=uses)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")]
    ])
    await message.answer(f"–ü—Ä–æ–º–æ–∫–æ–¥ <code>{data['promo_name']}</code> —Å–æ–∑–¥–∞–Ω!", reply_markup=kb, parse_mode="HTML")
    await state.clear()

@router.callback_query(F.data == "promo_limit_time", PromoStates.create_choose_limit)
async def promo_create_limit_time(call: CallbackQuery, state: FSMContext):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="promo_create")],
    ])
    text = "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö (–∏–ª–∏ 0 –¥–ª—è –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ):"
    if call.message.content_type == "photo":
        await call.message.edit_caption(caption=text, reply_markup=kb, parse_mode="HTML")
    else:
        await call.message.edit_text(text, reply_markup=kb, parse_mode="HTML")
    await state.set_state(PromoStates.create_input_time)
    await call.answer()

@router.message(PromoStates.create_input_time)
async def promo_create_input_time_msg(message: Message, state: FSMContext, db_pool):
    try:
        minutes = int(message.text.strip())
        if minutes < 0:
            raise ValueError
    except Exception:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ >= 0):")
        return
    data = await state.get_data()
    await create_promo(db_pool, data['promo_name'], data['promo_sum'], data.get('promo_type', 'balance'), expires_minutes=minutes)
    await message.answer(f"–ü—Ä–æ–º–æ–∫–æ–¥ <code>{data['promo_name']}</code> —Å–æ–∑–¥–∞–Ω!", parse_mode="HTML")
    await state.clear()

@router.callback_query(F.data == "promo_delete", PromoStates.menu)
async def promo_delete_choose(call: CallbackQuery, state: FSMContext, db_pool):
    promos = await get_active_promos(db_pool)
    kb = []
    for promo in promos:
        kb.append([InlineKeyboardButton(text=promo['code'], callback_data=f"promo_delete_promo_{promo['code']}")])
    kb.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_promos")])
    markup = InlineKeyboardMarkup(inline_keyboard=kb)
    text = "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:"
    await call.message.edit_caption(caption=text, reply_markup=markup, parse_mode="HTML")
    await state.set_state(PromoStates.delete_choose)
    await call.answer()

@router.callback_query(F.data.startswith("promo_delete_promo_"), PromoStates.delete_choose)
async def promo_delete_confirm(call: CallbackQuery, state: FSMContext, db_pool):
    code = call.data.replace("promo_delete_promo_", "")
    await delete_promo(db_pool, code)
    await call.message.answer(f"–ü—Ä–æ–º–æ–∫–æ–¥ <code>{code}</code> —É–¥–∞–ª—ë–Ω!", parse_mode="HTML")
    await state.clear()
    await admin_promos_menu(call, state)

@router.callback_query(F.data == "promo_active")
async def promo_active_list_universal(call: CallbackQuery, state: FSMContext, db_pool):
    promos = await get_active_promos(db_pool)
    kb = []
    for promo in promos:
        kb.append([InlineKeyboardButton(text=promo['code'], callback_data=f"promo_stats_{promo['code']}")])
    kb.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_promos")])
    markup = InlineKeyboardMarkup(inline_keyboard=kb)
    text = "–ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã:"
    if call.message.content_type == "photo":
        await call.message.edit_caption(caption=text, reply_markup=markup, parse_mode="HTML")
    else:
        await call.message.edit_text(text, reply_markup=markup, parse_mode="HTML")
    await state.set_state(PromoStates.show_active)
    await call.answer()

@router.callback_query(F.data.startswith("promo_stats_"), PromoStates.show_active)
async def promo_show_stats(call: CallbackQuery, state: FSMContext, db_pool):
    code = call.data.replace("promo_stats_", "")
    promo, uses = await get_promo_stats(db_pool, code)
    if not promo:
        await call.message.answer("–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.", parse_mode="HTML")
        await state.clear()
        await admin_promos_menu(call, state)
        return
    if promo['promo_type'] == 'discount':
        value_str = f"–°–∫–∏–¥–∫–∞: {promo['value']}%"
    else:
        value_str = f"–°—É–º–º–∞: {promo['value']} ‚ÇΩ"
    text = (
        f"<b>–ü—Ä–æ–º–æ–∫–æ–¥:</b> <code>{promo['code']}</code>\n"
        f"<b>{value_str}</b>\n"
        f"<b>–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ:</b> "
    )
    if promo['max_uses']:
        text += f"{promo['max_uses']} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π\n"
    elif promo['expires_at']:
        text += f"–¥–æ {promo['expires_at'].strftime('%d.%m.%Y %H:%M')}\n"
    else:
        text += "–ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π\n"
    text += f"<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ:</b> {uses} —Ä–∞–∑(–∞)\n"
    text += f"<b>–°—Ç–∞—Ç—É—Å:</b> {'–ê–∫—Ç–∏–≤–µ–Ω' if promo['is_active'] else '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}"
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="promo_active")],
    ])
    if call.message.content_type == "photo":
        await call.message.edit_caption(caption=text, reply_markup=kb, parse_mode="HTML")
    else:
        await call.message.edit_text(text, reply_markup=kb, parse_mode="HTML")
    await state.set_state(PromoStates.show_active)
    await call.answer()

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏ ---
async def generate_promo_code(pool):
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥
    for _ in range(10):
        code = ''.join(random.choices(string.ascii_uppercase + string.digits, k=8))
        async with pool.acquire() as conn:
            exists = await conn.fetchval("SELECT 1 FROM promo_codes WHERE code=$1", code)
        if not exists:
            return code
    raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥")

async def create_promo(pool, code, value, promo_type, max_uses=None, expires_minutes=None):
    now = datetime.now(timezone.utc)
    expires_at = None
    if expires_minutes and int(expires_minutes) > 0:
        expires_at = now + timedelta(minutes=int(expires_minutes))
    async with pool.acquire() as conn:
        await conn.execute(
            """
            INSERT INTO promo_codes (code, promo_type, value, max_uses, current_uses, created_at, expires_at, is_active)
            VALUES ($1, $2, $3, $4, 0, $5, $6, true)
            """,
            code, promo_type, float(value), int(max_uses) if max_uses else (None if expires_at else 1), now, expires_at
        )

async def get_active_promos(pool):
    async with pool.acquire() as conn:
        rows = await conn.fetch("SELECT * FROM promo_codes WHERE is_active=true ORDER BY created_at DESC")
    return rows

async def delete_promo(pool, code):
    async with pool.acquire() as conn:
        promo_id = await conn.fetchval("SELECT id FROM promo_codes WHERE code=$1", code)
        if promo_id:
            await conn.execute("DELETE FROM promo_history WHERE promo_code_id=$1", promo_id)
            await conn.execute("DELETE FROM promo_codes WHERE id=$1", promo_id)

async def get_promo_stats(pool, code):
    async with pool.acquire() as conn:
        promo = await conn.fetchrow("SELECT * FROM promo_codes WHERE code=$1", code)
        uses = await conn.fetchval("SELECT COUNT(*) FROM promo_history WHERE promo_code_id=(SELECT id FROM promo_codes WHERE code=$1)", code)
    return promo, uses

@router.message(PromoUserStates.waiting_for_code)
async def promo_activate_success(message: Message, db_pool, bot, state: FSMContext):
    code = message.text.strip().upper()
    user_id = message.from_user.id
    async with db_pool.acquire() as conn:
        promo = await conn.fetchrow("SELECT * FROM promo_codes WHERE code=$1 AND is_active=true", code)
        if not promo:
            await message.answer("–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω.")
            return
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
        if promo['expires_at'] and promo['expires_at'] < datetime.now(timezone.utc):
            await message.answer("–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∏—Å—Ç—ë–∫.")
            return
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
        if promo['max_uses'] and promo['current_uses'] >= promo['max_uses']:
            await message.answer("–ü—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑.")
            return
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        used = await conn.fetchval("SELECT 1 FROM promo_history WHERE user_id=$1 AND promo_code_id=$2", user_id, promo['id'])
        if used:
            await message.answer("–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥.")
            return
        # –í—Å—ë –æ–∫ ‚Äî –Ω–∞—á–∏—Å–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∏–ª–∏ —Å–∫–∏–¥–∫—É
        if promo['promo_type'] == 'discount':
            await conn.execute("UPDATE promo_codes SET current_uses = current_uses + 1 WHERE id=$1", promo['id'])
            await conn.execute("INSERT INTO promo_history (user_id, promo_code_id, used_at) VALUES ($1, $2, $3)", user_id, promo['id'], datetime.now(timezone.utc))
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏ –ª–∏–º–∏—Ç –∏ —É–¥–∞–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏ —Å–∞–º –ø—Ä–æ–º–æ–∫–æ–¥
            updated_promo = await conn.fetchrow("SELECT current_uses, max_uses FROM promo_codes WHERE id=$1", promo['id'])
            if updated_promo['max_uses'] and updated_promo['current_uses'] >= updated_promo['max_uses']:
                await conn.execute("DELETE FROM promo_history WHERE promo_code_id=$1", promo['id'])
                await conn.execute("DELETE FROM promo_codes WHERE id=$1", promo['id'])
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫–∏–¥–∫—É –≤ –±–∞–∑–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await conn.execute("UPDATE users SET discount=$1 WHERE telegram_id=$2", promo['value'], user_id)
            await message.answer(f"üéâ –ü—Ä–æ–º–æ–∫–æ–¥ <code>{code}</code> —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –í–∞—à–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞ <b>{promo['value']}%</b> –±—É–¥–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–∫—É–ø–∫–µ.", parse_mode="HTML")
        else:
            await conn.execute("UPDATE users SET balance = balance + $1 WHERE telegram_id=$2", promo['value'], user_id)
            await conn.execute("UPDATE promo_codes SET current_uses = current_uses + 1 WHERE id=$1", promo['id'])
            await conn.execute("INSERT INTO promo_history (user_id, promo_code_id, used_at) VALUES ($1, $2, $3)", user_id, promo['id'], datetime.now(timezone.utc))
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏ –ª–∏–º–∏—Ç –∏ —É–¥–∞–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏ —Å–∞–º –ø—Ä–æ–º–æ–∫–æ–¥
            updated_promo = await conn.fetchrow("SELECT current_uses, max_uses FROM promo_codes WHERE id=$1", promo['id'])
            if updated_promo['max_uses'] and updated_promo['current_uses'] >= updated_promo['max_uses']:
                await conn.execute("DELETE FROM promo_history WHERE promo_code_id=$1", promo['id'])
                await conn.execute("DELETE FROM promo_codes WHERE id=$1", promo['id'])
            await message.answer(f"üéâ –ü—Ä–æ–º–æ–∫–æ–¥ <code>{code}</code> —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ <b>{promo['value']} ‚ÇΩ</b>.", parse_mode="HTML")
    await cmd_start(message, bot, db_pool)

class PriceStates(StatesGroup):
    menu = State()
    stars_show = State()
    stars_input = State()
    stars_confirm = State()
    premium_choose = State()
    premium_show = State()
    premium_input = State()
    premium_confirm = State()

@router.callback_query(F.data == "admin_prices")
async def admin_prices_menu(call: CallbackQuery, state: FSMContext):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–¶–µ–Ω—ã –Ω–∞ –∑–≤–µ–∑–¥—ã", callback_data="price_stars")],
        [InlineKeyboardButton(text="–¶–µ–Ω—ã –Ω–∞ –ø—Ä–µ–º–∏—É–º", callback_data="price_premium")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")],
    ])
    await call.message.edit_caption(
        caption="<b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω–∞–º–∏</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=kb,
        parse_mode="HTML"
    )
    await state.set_state(PriceStates.menu)
    await call.answer()

@router.callback_query(F.data == "price_stars", PriceStates.menu)
async def price_stars_show(call: CallbackQuery, state: FSMContext, db_pool):
    star_price = await get_star_price(db_pool)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É", callback_data="price_stars_input")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_prices")],
    ])
    await call.message.edit_caption(
        caption=f"<b>–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –∑–∞ 1 –∑–≤–µ–∑–¥—É:</b> <code>{star_price}</code> ‚ÇΩ\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É'.",
        reply_markup=kb,
        parse_mode="HTML"
    )
    await state.set_state(PriceStates.stars_show)
    await call.answer()

@router.callback_query(F.data == "price_stars_input", PriceStates.stars_show)
async def price_stars_input(call: CallbackQuery, state: FSMContext):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="price_stars")],
    ])
    await call.message.edit_caption(
        caption="<b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –∑–∞ 1 –∑–≤–µ–∑–¥—É:</b>",
        reply_markup=kb,
        parse_mode="HTML"
    )
    await state.set_state(PriceStates.stars_input)
    await call.answer()

@router.message(PriceStates.stars_input)
async def price_stars_input_msg(message: Message, state: FSMContext):
    try:
        price = float(message.text.replace(",", "."))
        if price <= 0:
            raise ValueError
    except Exception:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1.8):")
        return
    await state.update_data(new_star_price=price)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="price_stars_confirm")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="price_stars")],
    ])
    await message.answer(f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –∑–∞ 1 –∑–≤–µ–∑–¥—É –Ω–∞ <b>{price}‚ÇΩ</b>?", reply_markup=kb, parse_mode="HTML")
    await state.set_state(PriceStates.stars_confirm)

@router.callback_query(F.data == "price_stars_confirm", PriceStates.stars_confirm)
async def price_stars_confirm(call: CallbackQuery, state: FSMContext, db_pool):
    data = await state.get_data()
    price = data.get("new_star_price")
    await set_star_price(db_pool, price)
    await call.message.answer(f"–¶–µ–Ω–∞ –∑–∞ 1 –∑–≤–µ–∑–¥—É —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ <b>{price}‚ÇΩ</b>.", parse_mode="HTML")
    await state.clear()
    await call.message.answer("<b>‚öôÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=admin_panel_kb(), parse_mode="HTML")
    await call.answer()

@router.callback_query(F.data == "price_premium")
async def price_premium_choose(call: CallbackQuery, state: FSMContext, db_pool):
    premium_prices = await get_premium_prices(db_pool)
    from handlers.start import PREMIUM_PLANS
    kb = InlineKeyboardMarkup(inline_keyboard=[
        *[[InlineKeyboardButton(text=f"{plan['name']} ‚Äî {premium_prices[i]}‚ÇΩ", callback_data=f"price_premium_{i}")]
          for i, plan in enumerate(PREMIUM_PLANS)],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_prices")],
    ])
    text = "<b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã:</b>"
    if call.message.content_type == "photo":
        await call.message.edit_caption(
            caption=text,
            reply_markup=kb,
            parse_mode="HTML"
        )
    else:
        await call.message.edit_text(
            text,
            reply_markup=kb,
            parse_mode="HTML"
        )
    await state.set_state(PriceStates.premium_choose)
    await call.answer()

@router.callback_query(F.data.startswith("price_premium_"), PriceStates.premium_choose)
async def price_premium_show(call: CallbackQuery, state: FSMContext, db_pool):
    premium_prices = await get_premium_prices(db_pool)
    from handlers.start import PREMIUM_PLANS
    plan_index = int(call.data.split("_")[-1])
    plan = PREMIUM_PLANS[plan_index]
    price = premium_prices[plan_index]
    await state.update_data(plan_index=plan_index)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É", callback_data="price_premium_input")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="price_premium")],
    ])
    text = f"<b>–¢–∞—Ä–∏—Ñ:</b> {plan['name']}\n<b>–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞:</b> <code>{price}</code> ‚ÇΩ\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É'."
    if call.message.content_type == "photo":
        await call.message.edit_caption(
            caption=text,
            reply_markup=kb,
            parse_mode="HTML"
        )
    else:
        await call.message.edit_text(
            text,
            reply_markup=kb,
            parse_mode="HTML"
        )
    await state.set_state(PriceStates.premium_show)
    await call.answer()

@router.callback_query(F.data == "price_premium_input", PriceStates.premium_show)
async def price_premium_input(call: CallbackQuery, state: FSMContext):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="price_premium")],
    ])
    await call.message.edit_caption(
        caption="<b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞:</b>",
        reply_markup=kb,
        parse_mode="HTML"
    )
    await state.set_state(PriceStates.premium_input)
    await call.answer()

@router.message(PriceStates.premium_input)
async def price_premium_input_msg(message: Message, state: FSMContext):
    try:
        price = float(message.text.replace(",", "."))
        if price <= 0:
            raise ValueError
    except Exception:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, 799):")
        return
    await state.update_data(new_premium_price=price)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="price_premium_confirm")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="price_premium")],
    ])
    await message.answer(f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –Ω–∞ <b>{price}‚ÇΩ</b>?", reply_markup=kb, parse_mode="HTML")
    await state.set_state(PriceStates.premium_confirm)

@router.callback_query(F.data == "price_premium_confirm", PriceStates.premium_confirm)
async def price_premium_confirm(call: CallbackQuery, state: FSMContext, db_pool):
    data = await state.get_data()
    price = data.get("new_premium_price")
    plan_index = data.get("plan_index")
    await set_premium_price(db_pool, plan_index, price)
    await call.message.answer(f"–¶–µ–Ω–∞ —Ç–∞—Ä–∏—Ñ–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ <b>{price}‚ÇΩ</b>.", parse_mode="HTML")
    await state.clear()
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ç–∞—Ä–∏—Ñ", callback_data="price_premium")],
        [InlineKeyboardButton(text="–í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")],
    ])
    await call.message.answer("–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=kb, parse_mode="HTML")
    await call.answer()

class BroadcastStates(StatesGroup):
    choose_type = State()
    waiting_for_text = State()
    waiting_for_photo = State()
    confirm_text = State()
    confirm_photo = State()

@router.callback_query(F.data == "admin_broadcast")
async def admin_broadcast_menu(call: CallbackQuery, state: FSMContext):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–¢–µ–∫—Å—Ç", callback_data="broadcast_text"),
            InlineKeyboardButton(text="–¢–µ–∫—Å—Ç+–§–æ—Ç–æ", callback_data="broadcast_photo")
        ],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")]
    ])
    await call.message.edit_caption(
        caption="<b>–†–∞—Å—Å—ã–ª–∫–∞</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏:",
        reply_markup=kb,
        parse_mode="HTML"
    )
    await state.set_state(BroadcastStates.choose_type)
    await call.answer()

@router.callback_query(F.data == "broadcast_text", BroadcastStates.choose_type)
async def broadcast_text_start(call: CallbackQuery, state: FSMContext):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_broadcast")]
    ])
    await call.message.edit_caption(
        caption=(
            "<b>–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:</b>\n\n"
            "<i>–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTML:</i>\n"
            "&lt;b&gt;–∂–∏—Ä–Ω—ã–π&lt;/b&gt;\n"
            "&lt;i&gt;–∫—É—Ä—Å–∏–≤&lt;/i&gt;\n"
            "&lt;u&gt;–ø–æ–¥—á—ë—Ä–∫–Ω—É—Ç—ã–π&lt;/u&gt;\n"
            "&lt;s&gt;–∑–∞—á—ë—Ä–∫–Ω—É—Ç—ã–π&lt;/s&gt;\n"
            "&lt;code&gt;–∫–æ–¥&lt;/code&gt;\n"
            "&lt;pre&gt;–±–ª–æ–∫ –∫–æ–¥–∞&lt;/pre&gt;\n"
            "&lt;a href='https://site.ru'&gt;—Å—Å—ã–ª–∫–∞&lt;/a&gt;\n"
            "&lt;tg-spoiler&gt;—Å–ø–æ–π–ª–µ—Ä&lt;/tg-spoiler&gt;"
        ),
        reply_markup=kb,
        parse_mode="HTML"
    )
    await state.set_state(BroadcastStates.waiting_for_text)
    await call.answer()

@router.message(BroadcastStates.waiting_for_text)
async def broadcast_text_input(message: Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ message.text, —á—Ç–æ–±—ã –Ω–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å HTML
    await state.update_data(broadcast_text=message.text)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="broadcast_confirm_text")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_broadcast")]
    ])
    await message.answer(
        f"<b>–¢–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:</b>\n{message.text}\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É?",
        reply_markup=kb,
        parse_mode="HTML"
    )
    await state.set_state(BroadcastStates.confirm_text)

@router.callback_query(F.data == "broadcast_confirm_text", BroadcastStates.confirm_text)
async def broadcast_text_confirm(call: CallbackQuery, state: FSMContext, db_pool, bot):
    data = await state.get_data()
    text = data.get("broadcast_text")
    async with db_pool.acquire() as conn:
        rows = await conn.fetch("SELECT telegram_id FROM users")
    count = 0
    errors = 0
    for row in rows:
        try:
            await bot.send_message(row["telegram_id"], text, parse_mode="HTML")
            count += 1
        except Exception:
            errors += 1
    await call.message.answer(f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–£—Å–ø–µ—à–Ω–æ: {count}\n–û—à–∏–±–æ–∫: {errors}")
    await state.clear()
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –æ—Ç–¥–µ–ª—å–Ω—ã–º –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    await call.message.answer("<b>‚öôÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=admin_panel_kb(),
        parse_mode="HTML"
    )

@router.callback_query(F.data == "broadcast_photo", BroadcastStates.choose_type)
async def broadcast_photo_start(call: CallbackQuery, state: FSMContext):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_broadcast")]
    ])
    await call.message.edit_caption(
        caption=(
            "<b>–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:</b>\n\n"
            "<i>–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTML:</i>\n"
            "&lt;b&gt;–∂–∏—Ä–Ω—ã–π&lt;/b&gt;\n"
            "&lt;i&gt;–∫—É—Ä—Å–∏–≤&lt;/i&gt;\n"
            "&lt;u&gt;–ø–æ–¥—á—ë—Ä–∫–Ω—É—Ç—ã–π&lt;/u&gt;\n"
            "&lt;s&gt;–∑–∞—á—ë—Ä–∫–Ω—É—Ç—ã–π&lt;/s&gt;\n"
            "&lt;code&gt;–∫–æ–¥&lt;/code&gt;\n"
            "&lt;pre&gt;–±–ª–æ–∫ –∫–æ–¥–∞&lt;/pre&gt;\n"
            "&lt;a href='https://site.ru'&gt;—Å—Å—ã–ª–∫–∞&lt;/a&gt;\n"
            "&lt;tg-spoiler&gt;—Å–ø–æ–π–ª–µ—Ä&lt;/tg-spoiler&gt;"
        ),
        reply_markup=kb,
        parse_mode="HTML"
    )
    await state.set_state(BroadcastStates.waiting_for_photo)
    await call.answer()

@router.message(BroadcastStates.waiting_for_photo)
async def broadcast_photo_input(message: Message, state: FSMContext):
    if not message.photo:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é.")
        return
    await state.update_data(broadcast_photo=message.photo[-1].file_id, broadcast_caption=message.caption)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="broadcast_confirm_photo")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_broadcast")]
    ])
    await message.answer_photo(
        message.photo[-1].file_id,
        caption=f"<b>–ü–æ–¥–ø–∏—Å—å:</b>\n{message.caption}\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É?",
        reply_markup=kb,
        parse_mode="HTML"
    )
    await state.set_state(BroadcastStates.confirm_photo)

@router.callback_query(F.data == "broadcast_confirm_photo", BroadcastStates.confirm_photo)
async def broadcast_photo_confirm(call: CallbackQuery, state: FSMContext, db_pool, bot):
    data = await state.get_data()
    photo_id = data.get("broadcast_photo")
    caption = data.get("broadcast_caption")
    async with db_pool.acquire() as conn:
        rows = await conn.fetch("SELECT telegram_id FROM users")
    count = 0
    errors = 0
    for row in rows:
        try:
            await bot.send_photo(row["telegram_id"], photo_id, caption=caption, parse_mode="HTML")
            count += 1
        except Exception:
            errors += 1
    await call.message.answer(f"–†–∞—Å—Å—ã–ª–∫–∞ —Å —Ñ–æ—Ç–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–£—Å–ø–µ—à–Ω–æ: {count}\n–û—à–∏–±–æ–∫: {errors}")
    await state.clear()
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –æ—Ç–¥–µ–ª—å–Ω—ã–º –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    await call.message.answer("<b>‚öôÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=admin_panel_kb(),
        parse_mode="HTML"
    )
    await call.answer()

# --- –†–∞–±–æ—Ç–∞ —Å —Ü–µ–Ω–∞–º–∏ (settings) ---
async def get_star_price(db_pool):
    async with db_pool.acquire() as conn:
        value = await conn.fetchval("SELECT value FROM settings WHERE key='star_price'")
        return float(value) if value else 1.8

async def set_star_price(db_pool, price):
    async with db_pool.acquire() as conn:
        await conn.execute("UPDATE settings SET value=$1 WHERE key='star_price'", str(price))

async def get_premium_prices(db_pool):
    async with db_pool.acquire() as conn:
        rows = await conn.fetch("SELECT key, value FROM settings WHERE key LIKE 'premium_price_%' ORDER BY key")
        return [float(row['value']) for row in sorted(rows, key=lambda r: int(r['key'].split('_')[-1]))]

async def set_premium_price(db_pool, index, price):
    async with db_pool.acquire() as conn:
        await conn.execute("UPDATE settings SET value=$1 WHERE key=$2", str(price), f'premium_price_{index}')

# --- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω –≤ —Ä–∞—Å—á–µ—Ç–∞—Ö ---
# –í–µ–∑–¥–µ, –≥–¥–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è STAR_PRICE, –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ await get_star_price(db_pool)
# –î–ª—è –ø—Ä–µ–º–∏—É–º-—Ü–µ–Ω –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ await get_premium_prices(db_pool)

@router.callback_query(F.data == "price_stars", PriceStates.menu)
async def price_stars_show(call: CallbackQuery, state: FSMContext, db_pool):
    star_price = await get_star_price(db_pool)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É", callback_data="price_stars_input")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_prices")],
    ])
    await call.message.edit_caption(
        caption=f"<b>–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –∑–∞ 1 –∑–≤–µ–∑–¥—É:</b> <code>{star_price}</code> ‚ÇΩ\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É'.",
        reply_markup=kb,
        parse_mode="HTML"
    )
    await state.set_state(PriceStates.stars_show)
    await call.answer()

@router.callback_query(F.data == "price_stars_confirm", PriceStates.stars_confirm)
async def price_stars_confirm(call: CallbackQuery, state: FSMContext, db_pool):
    data = await state.get_data()
    price = data.get("new_star_price")
    await set_star_price(db_pool, price)
    await call.message.answer(f"–¶–µ–Ω–∞ –∑–∞ 1 –∑–≤–µ–∑–¥—É —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ <b>{price}‚ÇΩ</b>.", parse_mode="HTML")
    await state.clear()
    await call.message.answer("<b>‚öôÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=admin_panel_kb(), parse_mode="HTML")
    await call.answer()

@router.callback_query(F.data == "price_premium")
async def price_premium_choose(call: CallbackQuery, state: FSMContext, db_pool):
    premium_prices = await get_premium_prices(db_pool)
    from handlers.start import PREMIUM_PLANS
    kb = InlineKeyboardMarkup(inline_keyboard=[
        *[[InlineKeyboardButton(text=f"{plan['name']} ‚Äî {premium_prices[i]}‚ÇΩ", callback_data=f"price_premium_{i}")]
          for i, plan in enumerate(PREMIUM_PLANS)],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_prices")],
    ])
    text = "<b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã:</b>"
    if call.message.content_type == "photo":
        await call.message.edit_caption(
            caption=text,
            reply_markup=kb,
            parse_mode="HTML"
        )
    else:
        await call.message.edit_text(
            text,
            reply_markup=kb,
            parse_mode="HTML"
        )
    await state.set_state(PriceStates.premium_choose)
    await call.answer()

@router.callback_query(F.data.startswith("price_premium_"), PriceStates.premium_choose)
async def price_premium_show(call: CallbackQuery, state: FSMContext, db_pool):
    premium_prices = await get_premium_prices(db_pool)
    from handlers.start import PREMIUM_PLANS
    plan_index = int(call.data.split("_")[-1])
    plan = PREMIUM_PLANS[plan_index]
    price = premium_prices[plan_index]
    await state.update_data(plan_index=plan_index)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É", callback_data="price_premium_input")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="price_premium")],
    ])
    await call.message.edit_caption(
        caption=f"<b>–¢–∞—Ä–∏—Ñ:</b> {plan['name']}\n<b>–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞:</b> <code>{price}</code> ‚ÇΩ\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É'.",
        reply_markup=kb,
        parse_mode="HTML"
    )
    await state.set_state(PriceStates.premium_show)
    await call.answer()

@router.callback_query(F.data == "price_premium_input", PriceStates.premium_show)
async def price_premium_input(call: CallbackQuery, state: FSMContext):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="price_premium")],
    ])
    await call.message.edit_caption(
        caption="<b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞:</b>",
        reply_markup=kb,
        parse_mode="HTML"
    )
    await state.set_state(PriceStates.premium_input)
    await call.answer()

@router.message(PriceStates.premium_input)
async def price_premium_input_msg(message: Message, state: FSMContext):
    try:
        price = float(message.text.replace(",", "."))
        if price <= 0:
            raise ValueError
    except Exception:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, 799):")
        return
    await state.update_data(new_premium_price=price)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="price_premium_confirm")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="price_premium")],
    ])
    await message.answer(f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –Ω–∞ <b>{price}‚ÇΩ</b>?", reply_markup=kb, parse_mode="HTML")
    await state.set_state(PriceStates.premium_confirm)

@router.callback_query(F.data == "price_premium_confirm", PriceStates.premium_confirm)
async def price_premium_confirm(call: CallbackQuery, state: FSMContext, db_pool):
    data = await state.get_data()
    price = data.get("new_premium_price")
    plan_index = data.get("plan_index")
    await set_premium_price(db_pool, plan_index, price)
    await call.message.answer(f"–¶–µ–Ω–∞ —Ç–∞—Ä–∏—Ñ–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ <b>{price}‚ÇΩ</b>.", parse_mode="HTML")
    await state.clear()
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ç–∞—Ä–∏—Ñ", callback_data="price_premium")],
        [InlineKeyboardButton(text="–í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")],
    ])
    await call.message.answer("–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=kb, parse_mode="HTML")
    await call.answer()

# --- –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ ---
from datetime import datetime, timezone

async def delete_expired_promos(db_pool):
    async with db_pool.acquire() as conn:
        # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π
        await conn.execute("""
            DELETE FROM promo_history WHERE promo_code_id IN (
                SELECT id FROM promo_codes WHERE expires_at IS NOT NULL AND expires_at < $1
            )
        """, datetime.now(timezone.utc))
        await conn.execute("""
            DELETE FROM promo_codes WHERE expires_at IS NOT NULL AND expires_at < $1
        """, datetime.now(timezone.utc))

class PaymentSettingsStates(StatesGroup):
    choose_system = State()
    choose_action = State()
    waiting_for_min_amount = State()
    waiting_for_exchange_rate = State()

@router.callback_query(F.data == "admin_payment_settings")
async def admin_payment_settings_menu(call: CallbackQuery, state: FSMContext):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="SBP", callback_data="admin_payment_sbp")],
        [InlineKeyboardButton(text="Crypto", callback_data="admin_payment_crypto")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")],
    ])
    text = "<b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—ë–∂–Ω—É—é —Å–∏—Å—Ç–µ–º—É:"
    if getattr(call.message, "content_type", None) == "photo":
        await call.message.edit_caption(
            caption=text,
            reply_markup=kb,
            parse_mode="HTML"
        )
    else:
        await call.message.edit_text(
            text,
            reply_markup=kb,
            parse_mode="HTML"
        )
    await state.set_state(PaymentSettingsStates.choose_system)
    await call.answer()

@router.callback_query(F.data.startswith("admin_payment_"), PaymentSettingsStates.choose_system)
async def admin_payment_choose_action(call: CallbackQuery, state: FSMContext, db_pool):
    system = call.data.replace("admin_payment_", "")
    await state.update_data(system=system)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É", callback_data="admin_payment_min")],
        *([[InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –∫—É—Ä—Å USD/RUB", callback_data="admin_payment_rate")]] if system == "crypto" else []),
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_payment_settings")],
    ])
    # –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
    async with db_pool.acquire() as conn:
        row = await conn.fetchrow("SELECT * FROM payment_settings WHERE system=$1", system)
    text = f"<b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è {system.upper()}</b>\n"
    if row:
        text += f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: <b>{row['min_amount']} {row['currency']}</b>\n"
        if system == "crypto":
            text += f"–ö—É—Ä—Å: <b>1 USD = {row['exchange_rate']} RUB</b>\n"
    else:
        text += "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö."
    await call.message.edit_caption(
        caption=text + "\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=kb,
        parse_mode="HTML"
    )
    await state.set_state(PaymentSettingsStates.choose_action)
    await call.answer()

@router.callback_query(F.data == "admin_payment_min", PaymentSettingsStates.choose_action)
async def admin_payment_min_start(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    system = data.get("system")
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_payment_settings")],
    ])
    await call.message.edit_caption(
        caption=f"<b>–ò–∑–º–µ–Ω–∏—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –¥–ª—è {system.upper()}</b>\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É:",
        reply_markup=kb,
        parse_mode="HTML"
    )
    await state.set_state(PaymentSettingsStates.waiting_for_min_amount)
    await call.answer()

@router.message(PaymentSettingsStates.waiting_for_min_amount)
async def admin_payment_min_set(message: Message, state: FSMContext, db_pool):
    try:
        min_amount = float(message.text.replace(",", "."))
        if min_amount <= 0:
            raise ValueError
    except Exception:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (—á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0):")
        return
    data = await state.get_data()
    system = data.get("system")
    async with db_pool.acquire() as conn:
        await conn.execute(
            "UPDATE payment_settings SET min_amount=$1, updated_at=NOW() WHERE system=$2",
            min_amount, system
        )
    await message.answer(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è {system.upper()} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ <b>{min_amount}</b>.", parse_mode="HTML")
    await state.clear()
    from config import load_config
    config = load_config()
    try:
        await message.answer_photo(
            config.welcome_image_url,
            caption="<b>‚öôÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=admin_panel_kb(),
            parse_mode="HTML"
        )
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏: {e}")

@router.callback_query(F.data == "admin_payment_rate", PaymentSettingsStates.choose_action)
async def admin_payment_rate_start(call: CallbackQuery, state: FSMContext):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_payment_settings")],
    ])
    await call.message.edit_caption(
        caption="<b>–ò–∑–º–µ–Ω–∏—Ç—å –∫—É—Ä—Å USD/RUB</b>\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫—É—Ä—Å (—Å–∫–æ–ª—å–∫–æ —Ä—É–±–ª–µ–π –∑–∞ 1 USD):",
        reply_markup=kb,
        parse_mode="HTML"
    )
    await state.set_state(PaymentSettingsStates.waiting_for_exchange_rate)
    await call.answer()

@router.message(PaymentSettingsStates.waiting_for_exchange_rate)
async def admin_payment_rate_set(message: Message, state: FSMContext, db_pool):
    try:
        rate = float(message.text.replace(",", "."))
        if rate <= 0:
            raise ValueError
    except Exception:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫—É—Ä—Å (—á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0):")
        return
    data = await state.get_data()
    system = data.get("system")
    async with db_pool.acquire() as conn:
        await conn.execute(
            "UPDATE payment_settings SET exchange_rate=$1, updated_at=NOW() WHERE system=$2",
            rate, system
        )
    await message.answer(f"–ö—É—Ä—Å –¥–ª—è {system.upper()} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω: <b>1 USD = {rate} RUB</b>.", parse_mode="HTML")
    await state.clear()
    from config import load_config
    config = load_config()
    try:
        await message.answer_photo(
            config.welcome_image_url,
            caption="<b>‚öôÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=admin_panel_kb(),
            parse_mode="HTML"
        )
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏: {e}")

@router.callback_query(F.data == "buy_stars", BuyStarsGiftStates.waiting_for_recipient)
async def back_from_gift_recipient(call: CallbackQuery, state: FSMContext):
    await state.clear()
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üßë‚Äçüíº –°–µ–±–µ", callback_data="buy_stars_self"),
            InlineKeyboardButton(text="üéÅ –î—Ä—É–≥–æ–º—É", callback_data="buy_stars_gift")
        ],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ])
    await call.message.edit_caption(
        caption="<b>–ö—É–ø–∏—Ç—å –∑–≤—ë–∑–¥—ã</b>\n\n–ö–æ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å –∑–≤—ë–∑–¥—ã?",
        reply_markup=kb,
        parse_mode="HTML"
    )
    await call.answer()

@router.callback_query(F.data == "buy_premium", BuyPremiumStates.waiting_for_gift_recipient)
async def back_from_premium_gift_recipient(call: CallbackQuery, state: FSMContext):
    await state.clear()
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üßë‚Äçüíº –°–µ–±–µ", callback_data="buy_premium_self"),
            InlineKeyboardButton(text="üéÅ –î—Ä—É–≥–æ–º—É", callback_data="buy_premium_gift")
        ],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ])
    from config import load_config
    config = load_config()
    await call.message.answer_photo(
        config.welcome_image_url,
        caption="<b>–ö—É–ø–∏—Ç—å –ø—Ä–µ–º–∏—É–º</b>\n\n–ö–æ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å –ø—Ä–µ–º–∏—É–º?",
        reply_markup=kb,
        parse_mode="HTML"
    )
    await call.answer()

@router.callback_query(F.data == "buy_premium_gift", BuyPremiumStates.waiting_for_gift_plan)
async def back_from_premium_gift_plan(call: CallbackQuery, state: FSMContext):
    kb = []
    for i, plan in enumerate(PREMIUM_PLANS):
        price = await get_premium_prices(call.data.get('db_pool')) if hasattr(call.data, 'get') else [plan['price'] for plan in PREMIUM_PLANS]
        btn_text = f"üíé {plan['name']} ‚Äî {price[i]}‚ÇΩ"
        kb.append([
            InlineKeyboardButton(
                text=btn_text,
                callback_data=f"buy_premium_gift_plan_{i}"
            )
        ])
    kb.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="buy_premium_gift")])
    await call.message.edit_caption(
        caption="<b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –¥–ª—è –ø–æ–¥–∞—Ä–∫–∞:</b>",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=kb),
        parse_mode="HTML"
    )
    await state.set_state(BuyPremiumStates.waiting_for_gift_plan)
    await call.answer()