from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from config import load_config
import time
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message
import httpx
import hmac
import hashlib
import json
import base64
from aiogram.exceptions import TelegramBadRequest
from datetime import datetime, timezone
from utils.payment_models import create_mulenpay_invoice, create_heleket_invoice
from aiogram.types import InputTextMessageContent

router = Router()
config = load_config()

# –î–æ–±–∞–≤–∏—Ç—å –∫—É—Ä—Å —Ä—É–±–ª—å-–¥–æ–ª–ª–∞—Ä (–º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Ñ–∏–≥)
RUB_TO_USD = 75  # –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –∫—É—Ä—Å —Ä—É–±–ª—å-–¥–æ–ª–ª–∞—Ä

class TopupSBPStates(StatesGroup):
    waiting_for_amount = State()

class PromoUserStates(StatesGroup):
    waiting_for_code = State()

class TopupCryptoStates(StatesGroup):
    waiting_for_amount = State()

async def get_or_create_user(pool, telegram_id, username, invited_by=None):
    async with pool.acquire() as conn:
        user = await conn.fetchrow("SELECT * FROM users WHERE telegram_id=$1", telegram_id)
        if not user:
            await conn.execute(
                "INSERT INTO users (telegram_id, username, invited_by) VALUES ($1, $2, $3)", telegram_id, username, invited_by
            )
            user = await conn.fetchrow("SELECT * FROM users WHERE telegram_id=$1", telegram_id)
        return user

async def get_ref_stats(pool, telegram_id):
    async with pool.acquire() as conn:
        count = await conn.fetchval("SELECT COUNT(*) FROM users WHERE invited_by=$1", telegram_id)
        # –°—É–º–º–∞ –≤—Å–µ—Ö –±–æ–Ω—É—Å–æ–≤, –Ω–∞—á–∏—Å–ª–µ–Ω–Ω—ã—Ö —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (5% –æ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤)
        bonus = await conn.fetchval(
            """
            SELECT COALESCE(SUM(ROUND(amount * 0.05, 2)), 0)
            FROM payments
            WHERE user_id IN (SELECT telegram_id FROM users WHERE invited_by=$1) AND is_paid=true
            """, telegram_id
        )
        return count, bonus

def profile_kb():
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="profile_topup"),
            InlineKeyboardButton(text="üéüÔ∏è –ü—Ä–æ–º–æ–∫–æ–¥—ã", callback_data="profile_activate_promo")
        ],
        [
            InlineKeyboardButton(text="üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞", callback_data="profile_referral"),
            InlineKeyboardButton(text="üìÑ –ü—É–±–ª–∏—á–Ω–∞—è –æ—Ñ–µ—Ä—Ç–∞", url=config.profile_offer_url)
        ],
        [
            InlineKeyboardButton(text="üîí –ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏", url=config.profile_privacy_url)
        ],
        [
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")
        ]
    ])

@router.callback_query(F.data == "profile")
async def profile_callback(call: CallbackQuery, db_pool):
    user = await get_or_create_user(db_pool, call.from_user.id, call.from_user.username)
    text = (
        f"<b>–ü—Ä–æ—Ñ–∏–ª—å</b>\n\n"
        f"ID: <code>{user['telegram_id']}</code>\n"
        f"Username: @{call.from_user.username or '-'}\n"
        f"–ë–∞–ª–∞–Ω—Å: <b>{user['balance']} ‚ÇΩ</b>"
    )
    await call.message.edit_caption(
        caption=text,
        reply_markup=profile_kb(),
        parse_mode="HTML"
    )
    await call.answer()

@router.callback_query(F.data == "profile_topup")
async def profile_topup_callback(call: CallbackQuery, db_pool, state: FSMContext = None):
    if state:
        await state.clear()
    user = await get_or_create_user(db_pool, call.from_user.id, call.from_user.username)
    text = (
        f"<b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞</b>\n\n"
        f"–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: <b>{user['balance']} ‚ÇΩ</b>\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:"
    )
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞ (–°–ë–ü)", callback_data="topup_sbp")],
        [InlineKeyboardButton(text="–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞", callback_data="topup_crypto")],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="profile")],
    ])
    if getattr(call.message, "content_type", None) == "photo":
        await call.message.edit_caption(
            caption=text,
            reply_markup=kb,
            parse_mode="HTML"
        )
    else:
        await call.message.edit_text(
            text,
            reply_markup=kb,
            parse_mode="HTML"
        )
    await call.answer()

@router.callback_query(F.data == "profile_referral")
async def profile_referral_callback(call: CallbackQuery, db_pool):
    user = await get_or_create_user(db_pool, call.from_user.id, call.from_user.username)
    me = await call.bot.get_me()
    bot_username = me.username
    ref_link = f"https://t.me/{bot_username}?start={user['telegram_id']}"
    ref_count, ref_bonus = await get_ref_stats(db_pool, user['telegram_id'])
    text = (
        f"<b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞</b>\n\n"
        f"–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n<code>{ref_link}</code>\n\n"
        f"–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ <b>5% –æ—Ç –∏—Ö –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π</b>!\n\n"
        f"<i>–ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ:</i> <b>{ref_count}</b>\n"
        f"<i>–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –±–æ–Ω—É—Å–æ–≤:</i> <b>{ref_bonus} ‚ÇΩ</b>\n"
    )
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="profile")],
    ])
    await call.message.edit_caption(
        caption=text,
        reply_markup=kb,
        parse_mode="HTML"
    )
    await call.answer()

@router.callback_query(F.data == "main_menu")
async def main_menu_callback(call: CallbackQuery):
    from handlers.start import main_menu_kb  # –∏–∑–±–µ–≥–∞–µ–º —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
    from config import load_config
    config = load_config()
    try:
        await call.message.edit_caption(
            caption=config.welcome_description,
            reply_markup=main_menu_kb(call.from_user.id),
            parse_mode="HTML"
        )
    except TelegramBadRequest:
        await call.message.delete()
        await call.message.answer_photo(
            config.welcome_image_url,
            caption=config.welcome_description,
            reply_markup=main_menu_kb(call.from_user.id),
            parse_mode="HTML"
        )
    await call.answer()

@router.callback_query(F.data == "profile_activate_promo")
async def profile_activate_promo_callback(call: CallbackQuery, state: FSMContext):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="profile")],
    ])
    await call.message.edit_caption(
        caption="<b>–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞</b>\n\n–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:",
        reply_markup=kb,
        parse_mode="HTML"
    )
    await state.set_state(PromoUserStates.waiting_for_code)
    await call.answer()

@router.message(PromoUserStates.waiting_for_code)
async def promo_user_enter_code(message: Message, state: FSMContext, db_pool):
    code = message.text.strip().upper()
    user_id = message.from_user.id
    async with db_pool.acquire() as conn:
        promo = await conn.fetchrow("SELECT * FROM promo_codes WHERE code=$1 AND is_active=true", code)
        if not promo:
            await message.answer("‚ùó –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ù–∞–∑–∞–¥'.")
            return
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
        if promo['expires_at'] and promo['expires_at'] < datetime.now(timezone.utc):
            await message.answer("‚ùó –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∏—Å—Ç—ë–∫.")
            return
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
        if promo['max_uses'] and promo['current_uses'] >= promo['max_uses']:
            await message.answer("‚ùó –ü—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑.")
            return
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        used = await conn.fetchval("SELECT 1 FROM promo_history WHERE user_id=$1 AND promo_code_id=$2", user_id, promo['id'])
        if used:
            await message.answer("‚ùó –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥.")
            return
        # --- –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ ---
        if promo['promo_type'] == 'discount':
            await state.update_data(active_discount=promo['value'])
            await conn.execute("UPDATE promo_codes SET current_uses = current_uses + 1 WHERE id=$1", promo['id'])
            await conn.execute("INSERT INTO promo_history (user_id, promo_code_id, used_at) VALUES ($1, $2, $3)", user_id, promo['id'], datetime.now(timezone.utc))
            await message.answer(f"üéâ –ü—Ä–æ–º–æ–∫–æ–¥ <code>{code}</code> —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –í–∞—à–∞ —Å–∫–∏–¥–∫–∞: <b>{promo['value']}%</b> –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –ø–æ–∫—É–ø–∫—É.", parse_mode="HTML")
            await state.clear()
            from handlers.start import main_menu_kb
            await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_kb(message.from_user.id))
            return
        # --- –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ ---
        await conn.execute("UPDATE users SET balance = balance + $1 WHERE telegram_id=$2", promo['value'], user_id)
        await conn.execute("UPDATE promo_codes SET current_uses = current_uses + 1 WHERE id=$1", promo['id'])
        await conn.execute("INSERT INTO promo_history (user_id, promo_code_id, used_at) VALUES ($1, $2, $3)", user_id, promo['id'], datetime.now(timezone.utc))
    await message.answer(f"üéâ –ü—Ä–æ–º–æ–∫–æ–¥ <code>{code}</code> —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ <b>{promo['value']} ‚ÇΩ</b>.", parse_mode="HTML")
    await state.clear()
    from handlers.start import main_menu_kb
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_kb(message.from_user.id))

@router.callback_query(F.data == "profile_topup", TopupSBPStates.waiting_for_amount)
async def fsm_back_to_topup(call: CallbackQuery, state: FSMContext, db_pool):
    await state.clear()
    user = await get_or_create_user(db_pool, call.from_user.id, call.from_user.username)
    text = (
        f"<b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞</b>\n\n"
        f"–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: <b>{user['balance']} ‚ÇΩ</b>\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:"
    )
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞ (–°–ë–ü)", callback_data="topup_sbp")],
        [InlineKeyboardButton(text="–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞", callback_data="topup_crypto")],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="profile")],
    ])
    await call.message.edit_caption(
        caption=text,
        reply_markup=kb,
        parse_mode="HTML"
    )
    await call.answer()

@router.callback_query(F.data == "topup_sbp")
async def topup_sbp_start(call: CallbackQuery, state: FSMContext, db_pool):
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    # –ü–æ–ª—É—á–∞–µ–º min_amount –∏–∑ –ë–î
    async with db_pool.acquire() as conn:
        row = await conn.fetchrow("SELECT min_amount FROM payment_settings WHERE system='sbp'")
    min_amount = float(row['min_amount']) if row and row['min_amount'] else 10
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_topup_sbp")]
    ])
    await call.message.answer(
        f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Ä—É–±–ª—è—Ö (–º–∏–Ω–∏–º—É–º {min_amount}):",
        reply_markup=kb
    )
    await state.update_data(min_amount=min_amount)
    await state.set_state(TopupSBPStates.waiting_for_amount)
    await call.answer()

@router.callback_query(F.data == "cancel_topup_sbp")
async def cancel_topup_sbp(call: CallbackQuery, state: FSMContext):
    await state.clear()
    from handlers.start import main_menu_kb
    from config import load_config
    config = load_config()
    try:
        await call.message.edit_caption(
            caption=config.welcome_description,
            reply_markup=main_menu_kb(call.from_user.id),
            parse_mode="HTML"
        )
    except Exception:
        await call.message.delete()
        await call.message.answer_photo(
            config.welcome_image_url,
            caption=config.welcome_description,
            reply_markup=main_menu_kb(call.from_user.id),
            parse_mode="HTML"
        )
    await call.answer()

@router.message(TopupSBPStates.waiting_for_amount)
async def topup_sbp_amount(message: Message, state: FSMContext, db_pool):
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    data = await state.get_data()
    min_amount = data.get('min_amount', 10)
    try:
        amount = float(message.text.replace(",", "."))
    except Exception:
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_topup_sbp")]
        ])
        await message.answer(
            f"‚ùó –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, 100 –∏–ª–∏ 250.50):\n–ú–∏–Ω–∏–º—É–º: {min_amount}",
            reply_markup=kb
        )
        return
    if amount < min_amount:
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_topup_sbp")]
        ])
        await message.answer(
            f"‚ùó –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è ‚Äî {min_amount}‚ÇΩ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
            reply_markup=kb
        )
        return
    user = await get_or_create_user(db_pool, message.from_user.id, message.from_user.username)
    unique_uuid = f"{user['telegram_id']}_{int(time.time())}"
    invoice = await create_mulenpay_invoice(unique_uuid, amount)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞—Ç—ë–∂ –≤ –ë–î
    async with db_pool.acquire() as conn:
        await conn.execute(
            """
            INSERT INTO payments (uuid, user_id, amount, is_paid, created_at)
            VALUES ($1, $2, $3, false, NOW())
            """,
            unique_uuid, user["telegram_id"], amount
        )
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å", url=invoice['paymentUrl'])],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_topup_sbp")]
    ])
    await message.answer(
        f"–°—á—ë—Ç –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ {amount}‚ÇΩ —Å–æ–∑–¥–∞–Ω!\n\n–î–ª—è –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
        reply_markup=kb,
        parse_mode="HTML"
    )
    await state.clear()

@router.callback_query(F.data == "topup_crypto")
async def topup_crypto_start(call: CallbackQuery, state: FSMContext, db_pool):
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    # –ü–æ–ª—É—á–∞–µ–º min_amount –∏–∑ –ë–î
    async with db_pool.acquire() as conn:
        row = await conn.fetchrow("SELECT min_amount, exchange_rate FROM payment_settings WHERE system='crypto'")
    min_amount = float(row['min_amount']) if row and row['min_amount'] else 75
    exchange_rate = float(row['exchange_rate']) if row and row['exchange_rate'] else 75
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_topup_crypto")]
    ])
    await call.message.answer(
        f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Ä—É–±–ª—è—Ö (–º–∏–Ω–∏–º—É–º {min_amount}):\n\n–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å: 1 USD = {exchange_rate} RUB",
        reply_markup=kb
    )
    await state.update_data(min_amount=min_amount, exchange_rate=exchange_rate)
    await state.set_state(TopupCryptoStates.waiting_for_amount)
    await call.answer()

@router.callback_query(F.data == "cancel_topup_crypto")
async def cancel_topup_crypto(call: CallbackQuery, state: FSMContext):
    await state.clear()
    from handlers.start import main_menu_kb
    from config import load_config
    config = load_config()
    try:
        await call.message.edit_caption(
            caption=config.welcome_description,
            reply_markup=main_menu_kb(call.from_user.id),
            parse_mode="HTML"
        )
    except Exception:
        await call.message.delete()
        await call.message.answer_photo(
            config.welcome_image_url,
            caption=config.welcome_description,
            reply_markup=main_menu_kb(call.from_user.id),
            parse_mode="HTML"
        )
    await call.answer()

@router.message(TopupCryptoStates.waiting_for_amount)
async def topup_crypto_amount(message: Message, state: FSMContext, db_pool):
    from config import load_config
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    config = load_config()
    data = await state.get_data()
    min_amount = data.get('min_amount', 75)
    exchange_rate = data.get('exchange_rate', 75)
    try:
        amount_rub = float(message.text.replace(",", "."))
    except Exception:
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_topup_crypto")]
        ])
        await message.answer(
            f"‚ùó –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 100 –∏–ª–∏ 250.50):\n\n–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å: 1 USD = {exchange_rate} RUB",
            reply_markup=kb
        )
        return
    if amount_rub < min_amount:
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_topup_crypto")]
        ])
        await message.answer(
            f"‚ùó –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è ‚Äî {min_amount} RUB. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:\n\n–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å: 1 USD = {exchange_rate} RUB",
            reply_markup=kb
        )
        return
    amount_usd = round(amount_rub / exchange_rate, 2)
    user = await get_or_create_user(db_pool, message.from_user.id, message.from_user.username)
    invoice = await create_heleket_invoice(
        user["telegram_id"],
        amount_usd,
        config.heleket_api_key,
        config.heleket_merchant_id,
        config.heleket_callback_url
    )
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞
    if invoice.get("state") != 0 or "result" not in invoice:
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_topup_crypto")]
        ])
        await message.answer(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫—Ä–∏–ø—Ç–æ-—Å—á—ë—Ç–∞: {invoice}", reply_markup=kb)
        await state.clear()
        return
    pay_url = invoice["result"]["url"]
    uuid = invoice["result"]["uuid"]
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞—Ç—ë–∂ –≤ –ë–î
    async with db_pool.acquire() as conn:
        await conn.execute(
            """
            INSERT INTO payments (uuid, user_id, amount, is_paid, created_at)
            VALUES ($1, $2, $3, false, NOW())
            """,
            uuid, user["telegram_id"], amount_rub
        )
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å", url=pay_url)],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_topup_crypto")]
    ])
    await message.answer(
        f"–°—á—ë—Ç –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ {amount_rub} RUB (‚âà {amount_usd} USD) —Å–æ–∑–¥–∞–Ω!\n\n–î–ª—è –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
        reply_markup=kb,
        parse_mode="HTML"
    )
    await state.clear()

